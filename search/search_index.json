{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Digital Developer Conference Hybrid Cloud - Lab Stream \u00b6 Welcome to our conference! In this set of workshops we'll be using discussing various concepts of Build Smart Build Secure all while setting up an example application. The goals of these workshops are: Learn how to use IBM Cloud App ID Use Operators in OpenShift OperatorHub Build and Deploy microservices in OpenShift Install and use OpenShift Serverless and OpenShift Service Mesh Have fun! About this conference \u00b6 During the conference you'll learn how to use open source technologies, frameworks, and platforms like Kubernetes, Tekton, and Red Hat\u00ae OpenShift\u00ae on IBM Cloud\u00ae to support your application modernization or cloud migration skills, through sessions on application development and DevOps implementation, plus hands-on labs. Hands-on Lab track: Threat Modeling and Identity Management Operator Workshop Microservice Workshop Serverless Workshop Service Mesh Workshop Pipelines (Tekton) Workshop We have a dedicated Slack channel for you to ask questions or for help in our workshops: #ddc-hybrid-labs You should have received the invitation to the Digital Developer Conference workspace in your email. Credits \u00b6 @AnthonyAmanse @antonmc @olaph5 @yankoyfman Many thanks to our testers! \u00b6 Shikha Maheshwari Muralidhar Chavan","title":"About the workshop"},{"location":"#digital-developer-conference-hybrid-cloud-lab-stream","text":"Welcome to our conference! In this set of workshops we'll be using discussing various concepts of Build Smart Build Secure all while setting up an example application. The goals of these workshops are: Learn how to use IBM Cloud App ID Use Operators in OpenShift OperatorHub Build and Deploy microservices in OpenShift Install and use OpenShift Serverless and OpenShift Service Mesh Have fun!","title":"Digital Developer Conference Hybrid Cloud - Lab Stream"},{"location":"#about-this-conference","text":"During the conference you'll learn how to use open source technologies, frameworks, and platforms like Kubernetes, Tekton, and Red Hat\u00ae OpenShift\u00ae on IBM Cloud\u00ae to support your application modernization or cloud migration skills, through sessions on application development and DevOps implementation, plus hands-on labs. Hands-on Lab track: Threat Modeling and Identity Management Operator Workshop Microservice Workshop Serverless Workshop Service Mesh Workshop Pipelines (Tekton) Workshop We have a dedicated Slack channel for you to ask questions or for help in our workshops: #ddc-hybrid-labs You should have received the invitation to the Digital Developer Conference workspace in your email.","title":"About this conference"},{"location":"#credits","text":"@AnthonyAmanse @antonmc @olaph5 @yankoyfman","title":"Credits"},{"location":"#many-thanks-to-our-testers","text":"Shikha Maheshwari Muralidhar Chavan","title":"Many thanks to our testers!"},{"location":"SUMMARY/","text":"Summary \u00b6 Getting Started \u00b6 Pre-work Threat Modeling & Identity Management \u00b6 Lecture Threat Modeling Identity Management Prerequisites Lab 1 Clone the repo Creating App ID in IBM Cloud Building the front end service Deploying to OpenShift Test the Simulator Operator Workshop \u00b6 Lecture Introduction Lab 2 Install the PostgreSQL Operator Create an instance of a database Load the schema Expose and verify Microservice Workshop \u00b6 Lecture Introduction Prerequisites Lab 3 Part 1 Part 2 Microservice Workshop (OSS) \u00b6 Lecture Introduction Prerequisites Lab Database setup Part 1 Part 2 Serverless Workshop \u00b6 Introduction Example Bank App Architecture Serverless Prerequisites Quick Install - Identity Management, Operator, Microservices Workshops Lab 4 Installing OpenShift Serverless Installing Knative Serving Clone the repo Create an admin scoped user Building the example serverless application Configure Deployment file Deploying to OpenShift Serverless Test the Serverless App Modify Serverless App Conclusion Service Mesh Workshop \u00b6 ServiceMesh Lab Pipelines (Tekton) Workshop \u00b6 Lecture What is tekton? CI/CD Explain tasks and pipelines Lab 6 Cluster Setup Install Pipeline Resources \u00b6 IBM Developer","title":"Summary"},{"location":"SUMMARY/#summary","text":"","title":"Summary"},{"location":"SUMMARY/#getting-started","text":"Pre-work","title":"Getting Started"},{"location":"SUMMARY/#threat-modeling-identity-management","text":"Lecture Threat Modeling Identity Management Prerequisites Lab 1 Clone the repo Creating App ID in IBM Cloud Building the front end service Deploying to OpenShift Test the Simulator","title":"Threat Modeling &amp; Identity Management"},{"location":"SUMMARY/#operator-workshop","text":"Lecture Introduction Lab 2 Install the PostgreSQL Operator Create an instance of a database Load the schema Expose and verify","title":"Operator Workshop"},{"location":"SUMMARY/#microservice-workshop","text":"Lecture Introduction Prerequisites Lab 3 Part 1 Part 2","title":"Microservice Workshop"},{"location":"SUMMARY/#microservice-workshop-oss","text":"Lecture Introduction Prerequisites Lab Database setup Part 1 Part 2","title":"Microservice Workshop (OSS)"},{"location":"SUMMARY/#serverless-workshop","text":"Introduction Example Bank App Architecture Serverless Prerequisites Quick Install - Identity Management, Operator, Microservices Workshops Lab 4 Installing OpenShift Serverless Installing Knative Serving Clone the repo Create an admin scoped user Building the example serverless application Configure Deployment file Deploying to OpenShift Serverless Test the Serverless App Modify Serverless App Conclusion","title":"Serverless Workshop"},{"location":"SUMMARY/#service-mesh-workshop","text":"ServiceMesh Lab","title":"Service Mesh Workshop"},{"location":"SUMMARY/#pipelines-tekton-workshop","text":"Lecture What is tekton? CI/CD Explain tasks and pipelines Lab 6 Cluster Setup Install Pipeline","title":"Pipelines (Tekton) Workshop"},{"location":"SUMMARY/#resources","text":"IBM Developer","title":"Resources"},{"location":"appid/building-front-end/","text":"Building the front end service \u00b6 1. Build the container image \u00b6 To build the container image, you can use docker build. Make sure you are in the root directory of the git repo. $ export DOCKER_USERNAME=your-docker-hub-username $ docker build -t $DOCKER_USERNAME/workshop-mobile-simulator:1.0 . 2. Push the container image \u00b6 In this lab, you can use a Docker Hub to push your container image. Make sure you are also logged in your Docker Hub account when you push the image. $ docker login $ docker push $DOCKER_USERNAME/workshop-mobile-simulator:1.0","title":"Building the front end service"},{"location":"appid/building-front-end/#building-the-front-end-service","text":"","title":"Building the front end service"},{"location":"appid/building-front-end/#1-build-the-container-image","text":"To build the container image, you can use docker build. Make sure you are in the root directory of the git repo. $ export DOCKER_USERNAME=your-docker-hub-username $ docker build -t $DOCKER_USERNAME/workshop-mobile-simulator:1.0 .","title":"1. Build the container image"},{"location":"appid/building-front-end/#2-push-the-container-image","text":"In this lab, you can use a Docker Hub to push your container image. Make sure you are also logged in your Docker Hub account when you push the image. $ docker login $ docker push $DOCKER_USERNAME/workshop-mobile-simulator:1.0","title":"2. Push the container image"},{"location":"appid/clone-the-repo/","text":"Clone the repo \u00b6 Clone the example-bank repo \u00b6 Clone the repo example-bank if you haven't yet $ git clone https://github.com/IBM/example-bank $ cd example-bank Login with ibmcloud and oc cli \u00b6 Log in your IBM Cloud account with the ibmcloud cli Make sure to use your personal account when it asks you. $ ibmcloud login -u YOUR_IBM_CLOUD_EMAIL Log in with the OpenShift cluster provided for you using the OpenShift console. On the upper right corner, click your account and then click on Copy Login Command . This should open a new window and show you the command to login with the oc cli Create a project named example-bank for the resources you'll deploy. $ oc new-project example-bank Also, make sure you are using the example-bank project. $ oc project example-bank","title":"Clone the repo"},{"location":"appid/clone-the-repo/#clone-the-repo","text":"","title":"Clone the repo"},{"location":"appid/clone-the-repo/#clone-the-example-bank-repo","text":"Clone the repo example-bank if you haven't yet $ git clone https://github.com/IBM/example-bank $ cd example-bank","title":"Clone the example-bank repo"},{"location":"appid/clone-the-repo/#login-with-ibmcloud-and-oc-cli","text":"Log in your IBM Cloud account with the ibmcloud cli Make sure to use your personal account when it asks you. $ ibmcloud login -u YOUR_IBM_CLOUD_EMAIL Log in with the OpenShift cluster provided for you using the OpenShift console. On the upper right corner, click your account and then click on Copy Login Command . This should open a new window and show you the command to login with the oc cli Create a project named example-bank for the resources you'll deploy. $ oc new-project example-bank Also, make sure you are using the example-bank project. $ oc project example-bank","title":"Login with ibmcloud and oc cli"},{"location":"appid/creating-app-id/","text":"Creating App ID in IBM Cloud \u00b6 1. Create IBM Cloud App ID instance \u00b6 Create one with a name of appid-example-bank using the IBM Cloud dashboard https://cloud.ibm.com/catalog/services/appid NOTE: Make sure you are using your personal account. 2. Configure App ID \u00b6 Allow Sign-up and Sign-in using username and password by going to the tab Cloud Directory > Settings Disable Email Verification by going to the tab Cloud Directory > Email Templates > Email verification Add an application called mobile-simulator in the Applications tab. Select \"Regular web application\". Make sure you also add an admin scope. Create the admin role. The scope would be mobile-simulator/admin . Create Service credentials with the Writer Role so that the simulator can create simulated users with the App ID instance. Name it appid-example-bank-credentials 3. Create secrets \u00b6 Create secrets of App ID credentials for OpenShift cluster You can use this script to create the secrets in your OpenShift cluster. This grabs your App ID instance named appid-example-bank and service credentials named appid-example-bank-credentials $ ./scripts/mapAppIDtoSecrets.sh secret/bank-oidc-secret created secret/bank-appid-secret created secret/bank-iam-secret created secret/mobile-simulator-secrets created","title":"Creating App ID in IBM Cloud"},{"location":"appid/creating-app-id/#creating-app-id-in-ibm-cloud","text":"","title":"Creating App ID in IBM Cloud"},{"location":"appid/creating-app-id/#1-create-ibm-cloud-app-id-instance","text":"Create one with a name of appid-example-bank using the IBM Cloud dashboard https://cloud.ibm.com/catalog/services/appid NOTE: Make sure you are using your personal account.","title":"1. Create IBM Cloud App ID instance"},{"location":"appid/creating-app-id/#2-configure-app-id","text":"Allow Sign-up and Sign-in using username and password by going to the tab Cloud Directory > Settings Disable Email Verification by going to the tab Cloud Directory > Email Templates > Email verification Add an application called mobile-simulator in the Applications tab. Select \"Regular web application\". Make sure you also add an admin scope. Create the admin role. The scope would be mobile-simulator/admin . Create Service credentials with the Writer Role so that the simulator can create simulated users with the App ID instance. Name it appid-example-bank-credentials","title":"2. Configure App ID"},{"location":"appid/creating-app-id/#3-create-secrets","text":"Create secrets of App ID credentials for OpenShift cluster You can use this script to create the secrets in your OpenShift cluster. This grabs your App ID instance named appid-example-bank and service credentials named appid-example-bank-credentials $ ./scripts/mapAppIDtoSecrets.sh secret/bank-oidc-secret created secret/bank-appid-secret created secret/bank-iam-secret created secret/mobile-simulator-secrets created","title":"3. Create secrets"},{"location":"appid/deploying-to-openshift/","text":"Deploying to OpenShift \u00b6 Verify deployment file \u00b6 Open deployment.yaml file in the root folder. Change the configuration to use the image you just built. containers : - image : <YOUR_DOCKER_HUB>/workshop-mobile-simulator:1.0 Deploy to OpenShift \u00b6 To deploy, you can use oc apply with the deployment file. $ oc apply -f deployment.yaml Check status \u00b6 Check the status of the pods. Make sure the status is Running . You can also check its logs using oc logs <podname> $ oc get pods NAME READY STATUS RESTARTS AGE mobile-simulator-deployment-5b7bb5f56f-qvrj7 1 /1 Running 0 15s","title":"Deploying to OpenShift"},{"location":"appid/deploying-to-openshift/#deploying-to-openshift","text":"","title":"Deploying to OpenShift"},{"location":"appid/deploying-to-openshift/#verify-deployment-file","text":"Open deployment.yaml file in the root folder. Change the configuration to use the image you just built. containers : - image : <YOUR_DOCKER_HUB>/workshop-mobile-simulator:1.0","title":"Verify deployment file"},{"location":"appid/deploying-to-openshift/#deploy-to-openshift","text":"To deploy, you can use oc apply with the deployment file. $ oc apply -f deployment.yaml","title":"Deploy to OpenShift"},{"location":"appid/deploying-to-openshift/#check-status","text":"Check the status of the pods. Make sure the status is Running . You can also check its logs using oc logs <podname> $ oc get pods NAME READY STATUS RESTARTS AGE mobile-simulator-deployment-5b7bb5f56f-qvrj7 1 /1 Running 0 15s","title":"Check status"},{"location":"appid/identity-management/","text":"Identity Management \u00b6 What is App ID? \u00b6 IBM Cloud\u00ae App ID allows you to easily add authentication to web and mobile apps with zero code changes and no redeploy required. You no longer have to worry about setting up infrastructure for identity, ensuring geo-availability, and confirming compliance regulations. Instead, enhance your apps with advanced security capabilities, such as multifactor authentication (MFA), single sign-on (SSO) and user-defined password policies. You can also use App ID's scalable user registry to let users manage their own accounts. App ID in the Example Bank application \u00b6 The user creates an account using the mobile app simulator. This hits an API from the nodejs server. The nodejs server then hits an API from the App ID service that would create the user's account in its own cloud directory. The mobile app simulator then logs in the user after account creation. The App ID service then creates valid access tokens and ID tokens for the user. The mobile app stores these tokens for later use in authentication. Using the access token from the previous step, the mobile app can now successfully call the protected APIs in the Liberty microservice. The mobile app calls the API with the access token in the authorization header to create the user profile in the database. The Liberty service is integrated with the App ID instance. This verifies the access token in the authorization header from the request. When the token is valid, the user profile is created in the database. The access token contains the user ID of the user that sent the request. Auth token flow with AppId as identity provider and Liberty's use of token to authenticate users: \u00b6 The Liberty microservices are protected APIs that require authorization headers. If the request does not have one, it will not allow the request to be processed, thus sending a 401 Unauthorized response. The microservices makes use of a managed identity provider, App ID for this authentication. This makes it easier to protect APIs and manage identity information of users. The mobile app simulator is integrated with the App ID instance and whenever a user logs in, the app receives access tokens and stores them for later use in requests to the protected APIs. The tokens expire in an hour by default which would require users to authenticate again after expiration. Whenever a request with a token in the authorization header is sent, the Liberty microservice uses the App ID integration to make sure that the token is valid. Then it continues to process the request. The liberty microservice also makes use of the subject ID or user ID in the token to identify which user is making the request. For example, when a user asks for his number of points earned, it needs to pull the right profile from the database. This is where the user ID in the token payload can be made use of.","title":"Introduction"},{"location":"appid/identity-management/#identity-management","text":"","title":"Identity Management"},{"location":"appid/identity-management/#what-is-app-id","text":"IBM Cloud\u00ae App ID allows you to easily add authentication to web and mobile apps with zero code changes and no redeploy required. You no longer have to worry about setting up infrastructure for identity, ensuring geo-availability, and confirming compliance regulations. Instead, enhance your apps with advanced security capabilities, such as multifactor authentication (MFA), single sign-on (SSO) and user-defined password policies. You can also use App ID's scalable user registry to let users manage their own accounts.","title":"What is App ID?"},{"location":"appid/identity-management/#app-id-in-the-example-bank-application","text":"The user creates an account using the mobile app simulator. This hits an API from the nodejs server. The nodejs server then hits an API from the App ID service that would create the user's account in its own cloud directory. The mobile app simulator then logs in the user after account creation. The App ID service then creates valid access tokens and ID tokens for the user. The mobile app stores these tokens for later use in authentication. Using the access token from the previous step, the mobile app can now successfully call the protected APIs in the Liberty microservice. The mobile app calls the API with the access token in the authorization header to create the user profile in the database. The Liberty service is integrated with the App ID instance. This verifies the access token in the authorization header from the request. When the token is valid, the user profile is created in the database. The access token contains the user ID of the user that sent the request.","title":"App ID in the Example Bank application"},{"location":"appid/identity-management/#auth-token-flow-with-appid-as-identity-provider-and-libertys-use-of-token-to-authenticate-users","text":"The Liberty microservices are protected APIs that require authorization headers. If the request does not have one, it will not allow the request to be processed, thus sending a 401 Unauthorized response. The microservices makes use of a managed identity provider, App ID for this authentication. This makes it easier to protect APIs and manage identity information of users. The mobile app simulator is integrated with the App ID instance and whenever a user logs in, the app receives access tokens and stores them for later use in requests to the protected APIs. The tokens expire in an hour by default which would require users to authenticate again after expiration. Whenever a request with a token in the authorization header is sent, the Liberty microservice uses the App ID integration to make sure that the token is valid. Then it continues to process the request. The liberty microservice also makes use of the subject ID or user ID in the token to identify which user is making the request. For example, when a user asks for his number of points earned, it needs to pull the right profile from the database. This is where the user ID in the token payload can be made use of.","title":"Auth token flow with AppId as identity provider and Liberty's use of token to authenticate users:"},{"location":"appid/prerequisites/","text":"Prerequisites \u00b6 Docker Hub account IBM Cloud account Grab an OpenShift Cluster for this workshop Grant cluster url: https://cloud-lab.mybluemix.net/ Lab Key is oslab https://labs.cognitiveclass.ai/ virtual environment with IDE and shell terminal OR you can choose to use the terminal in your own local environment Docker install ibmcloud cli install oc cli jq - command line JSON parser","title":"Prerequisites"},{"location":"appid/prerequisites/#prerequisites","text":"Docker Hub account IBM Cloud account Grab an OpenShift Cluster for this workshop Grant cluster url: https://cloud-lab.mybluemix.net/ Lab Key is oslab https://labs.cognitiveclass.ai/ virtual environment with IDE and shell terminal OR you can choose to use the terminal in your own local environment Docker install ibmcloud cli install oc cli jq - command line JSON parser","title":"Prerequisites"},{"location":"appid/test-the-simulator/","text":"Test the Simulator \u00b6 Get the mobile simulator route. $ oc get routes NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD mobile-simulator-service ***.appdomain.cloud mobile-simulator-service <all> None Open the URL and open the console in the developer tools of your browser to view the access token. Try and test the Sign-up functionality. The simulator will get stuck in the \"Creating user profile...\" loading screen. This is expected for now as you haven't deployed the other microservices of the Example Bank application. You can also go back to your IBM Cloud App ID dashboard to view and manage the users that have been created. Summary \u00b6 Learned about Threat Modelling Explored App ID Built and Deploy Node.js microservice in OpenShift Source code: https://github.com/IBM/example-bank More ways to use App ID https://cloud.ibm.com/docs/appid?topic=appid-adding-overview","title":"Test the Simulator"},{"location":"appid/test-the-simulator/#test-the-simulator","text":"Get the mobile simulator route. $ oc get routes NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD mobile-simulator-service ***.appdomain.cloud mobile-simulator-service <all> None Open the URL and open the console in the developer tools of your browser to view the access token. Try and test the Sign-up functionality. The simulator will get stuck in the \"Creating user profile...\" loading screen. This is expected for now as you haven't deployed the other microservices of the Example Bank application. You can also go back to your IBM Cloud App ID dashboard to view and manage the users that have been created.","title":"Test the Simulator"},{"location":"appid/test-the-simulator/#summary","text":"Learned about Threat Modelling Explored App ID Built and Deploy Node.js microservice in OpenShift Source code: https://github.com/IBM/example-bank More ways to use App ID https://cloud.ibm.com/docs/appid?topic=appid-adding-overview","title":"Summary"},{"location":"appid/threat-modeling/","text":"Link to slides will be posted soon!","title":"Threat modeling"},{"location":"appid/lab1/","text":"Introduction \u00b6 Series of labs to create an instance of AppID and deploying the front end service of the Example-Bank application. About this workshop \u00b6 This series has an additional presentation. Agenda \u00b6 Clone the repo Creating AppID in IBM Cloud Building the frond end service Deploying to OpenShift Test the Simulator Pre-requirements \u00b6 For this workshop you must have: Docker Hub account IBM Cloud account Grab an OpenShift Cluster for this workshop https://labs.cognitiveclass.ai/ virtual environment with IDE and shell terminal OR you can choose to use the terminal in your own local environment Docker install ibmcloud cli install oc cli jq - command line JSON parser Credits \u00b6 Anthony Amanse Badge \u00b6 After completion of the workshop, you can collect your badge","title":"About Lab 1"},{"location":"appid/lab1/#introduction","text":"Series of labs to create an instance of AppID and deploying the front end service of the Example-Bank application.","title":"Introduction"},{"location":"appid/lab1/#about-this-workshop","text":"This series has an additional presentation.","title":"About this workshop"},{"location":"appid/lab1/#agenda","text":"Clone the repo Creating AppID in IBM Cloud Building the frond end service Deploying to OpenShift Test the Simulator","title":"Agenda"},{"location":"appid/lab1/#pre-requirements","text":"For this workshop you must have: Docker Hub account IBM Cloud account Grab an OpenShift Cluster for this workshop https://labs.cognitiveclass.ai/ virtual environment with IDE and shell terminal OR you can choose to use the terminal in your own local environment Docker install ibmcloud cli install oc cli jq - command line JSON parser","title":"Pre-requirements"},{"location":"appid/lab1/#credits","text":"Anthony Amanse","title":"Credits"},{"location":"appid/lab1/#badge","text":"After completion of the workshop, you can collect your badge","title":"Badge"},{"location":"mesh-lab/intro/","text":"OpenShift Service Mesh is based on Istio, but allows multiple control planes and management via OpenShift Console.","title":"Intro"},{"location":"mesh-lab/lab5/","text":"OpenShift Service Mesh for Example Bank \u00b6 Part 1: Deploy Example Bank \u00b6 Login and checkout Example Bank github repo. oc login ibmcloud login -u <account name> git clone https://github.com/IBM/example-bank.git oc new-project example-bank cd example-bank/scripts/ ./createappid.sh ./createsecrets.sh <AppId Management Server URL> <API Key> ./deploy-db.sh ./installServerlessOperator.sh * Note: Verify the creditdb database pod is in Running state before running the SQL schema loader. Deploy front end service and SQL data schema. oc apply -f deployment.yaml oc apply -f data_model/job.yaml Verify schema loaded to ensure the database is ready to use. oc logs cc-schema-load-<pod> Deploy back-end services: oc apply -f bank-app-backend/transaction-service/deployment.yaml -f bank-app-backend/user-service/deployment.yaml Deploy the Serverless (knative) service. cd bank-knative-service/ oc apply -f deployment.yaml Verify it's running: oc get kservice At this point we can verify the app is running prior to setting up service mesh. We are using an OpenShift route. oc get routes Visit URL for the mobile simulator route. Part 2: Service Mesh Setup \u00b6 Open up the OpenShift console, navigate to the the OperatorHub, install operators in this order: Elastic Search (choose version 4.3) Jaeger Operator Kiali Service Mesh Operator Create a new project called istio-system . Go to installed operators, and wait until they become available in this namespace. While waiting, check out the service-mesh branch: git checkout service-mesh ```` ### Next steps: - Create Control Plane instance. - Create ServiceMeshMemberRolls Verify install: ```oc get smmr -o yaml --all-namespaces | egrep -A2 'ControlPlane|configuredMembers'``` Open up a second terminal to watch pods: `watch -n1 oc get pods` Deploy with sidecar enabled: oc apply -f bank-app-backend/user-service/deployment.yaml -f bank-app-backend/transaction-service/deployment.yaml -f deployment.yaml Patch database pod to inject the Istio sidecar. kubectl patch deployments.apps creditdb -p '{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"sidecar.istio.io/inject\":\"true\"}}}}}' Delete route and replace with Istio ingress gateway: oc delete routes --all oc apply -f bank-istio-gw.yaml Force mTLS between database and other services: oc apply -f bank-istio-policy.yaml -f bank-istio-destination-mtls.yaml Enable knative-serving with Istio. ./label-knative.sh This sets the appropriate labels in the `knative-serving` namespace allowing the knative service to be triggered. Redeploy the knative service with the Istio sidecar annotation. oc apply -f bank-knative-service/network.yaml oc apply -f bank-knative-service/deployment.yaml > We are updating the cleanup utility because we need to send a signal to the Envoy sidecar to exit after the job completes. oc delete -f bank-user-cleanup-utility/job.yaml oc apply -f bank-user-cleanup-utility/job.yaml ``` Expose access via OpenShift secured route. Go to istio-system namespace in Admin console. Set port 80 -> 8080, Edge, Redirect. Default OpenShift certs can be used, or you can upload your own certificates. Click on URL, e.g. https://example-bank-istio-system.first-test-cluster-f8c169e6934c89d328b2b987ec7f7018-0000.us-south.containers.appdomain.cloud/ Click on \"Padlock\" to examine certs. Use bank simulator. Note that all relevant pods have extra container. Open up Kiali from App square to view traffic flow. Badge \u00b6 After completion of the workshop, you can collect your badge","title":"Service Mesh Lab"},{"location":"mesh-lab/lab5/#openshift-service-mesh-for-example-bank","text":"","title":"OpenShift Service Mesh for Example Bank"},{"location":"mesh-lab/lab5/#part-1-deploy-example-bank","text":"Login and checkout Example Bank github repo. oc login ibmcloud login -u <account name> git clone https://github.com/IBM/example-bank.git oc new-project example-bank cd example-bank/scripts/ ./createappid.sh ./createsecrets.sh <AppId Management Server URL> <API Key> ./deploy-db.sh ./installServerlessOperator.sh * Note: Verify the creditdb database pod is in Running state before running the SQL schema loader. Deploy front end service and SQL data schema. oc apply -f deployment.yaml oc apply -f data_model/job.yaml Verify schema loaded to ensure the database is ready to use. oc logs cc-schema-load-<pod> Deploy back-end services: oc apply -f bank-app-backend/transaction-service/deployment.yaml -f bank-app-backend/user-service/deployment.yaml Deploy the Serverless (knative) service. cd bank-knative-service/ oc apply -f deployment.yaml Verify it's running: oc get kservice At this point we can verify the app is running prior to setting up service mesh. We are using an OpenShift route. oc get routes Visit URL for the mobile simulator route.","title":"Part 1: Deploy Example Bank"},{"location":"mesh-lab/lab5/#part-2-service-mesh-setup","text":"Open up the OpenShift console, navigate to the the OperatorHub, install operators in this order: Elastic Search (choose version 4.3) Jaeger Operator Kiali Service Mesh Operator Create a new project called istio-system . Go to installed operators, and wait until they become available in this namespace. While waiting, check out the service-mesh branch: git checkout service-mesh ```` ### Next steps: - Create Control Plane instance. - Create ServiceMeshMemberRolls Verify install: ```oc get smmr -o yaml --all-namespaces | egrep -A2 'ControlPlane|configuredMembers'``` Open up a second terminal to watch pods: `watch -n1 oc get pods` Deploy with sidecar enabled: oc apply -f bank-app-backend/user-service/deployment.yaml -f bank-app-backend/transaction-service/deployment.yaml -f deployment.yaml Patch database pod to inject the Istio sidecar. kubectl patch deployments.apps creditdb -p '{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"sidecar.istio.io/inject\":\"true\"}}}}}' Delete route and replace with Istio ingress gateway: oc delete routes --all oc apply -f bank-istio-gw.yaml Force mTLS between database and other services: oc apply -f bank-istio-policy.yaml -f bank-istio-destination-mtls.yaml Enable knative-serving with Istio. ./label-knative.sh This sets the appropriate labels in the `knative-serving` namespace allowing the knative service to be triggered. Redeploy the knative service with the Istio sidecar annotation. oc apply -f bank-knative-service/network.yaml oc apply -f bank-knative-service/deployment.yaml > We are updating the cleanup utility because we need to send a signal to the Envoy sidecar to exit after the job completes. oc delete -f bank-user-cleanup-utility/job.yaml oc apply -f bank-user-cleanup-utility/job.yaml ``` Expose access via OpenShift secured route. Go to istio-system namespace in Admin console. Set port 80 -> 8080, Edge, Redirect. Default OpenShift certs can be used, or you can upload your own certificates. Click on URL, e.g. https://example-bank-istio-system.first-test-cluster-f8c169e6934c89d328b2b987ec7f7018-0000.us-south.containers.appdomain.cloud/ Click on \"Padlock\" to examine certs. Use bank simulator. Note that all relevant pods have extra container. Open up Kiali from App square to view traffic flow.","title":"Part 2: Service Mesh Setup"},{"location":"mesh-lab/lab5/#badge","text":"After completion of the workshop, you can collect your badge","title":"Badge"},{"location":"mesh-lab/tasks/","text":"tbd","title":"Tasks"},{"location":"mesh-lab/tooling/","text":"tbd","title":"Tooling"},{"location":"microservices/introduction/","text":"Introduction \u00b6 Microservices are an architectural approach to building applications. As an architectural framework, microservices are distributed and loosely coupled, so one team\u2019s changes won\u2019t break the entire app. The benefit to using microservices is that development teams are able to rapidly build new components of apps to meet changing business needs. You can build polyglot microservices Each microservice can be assigned to a team Scale each independently Can provide resiliency The example bank application \u00b6 The example bank system includes several microservices for handling user authentication and transaction mechanics. This lab focuses on the java microservices components that is part of the Example Bank app. Build and push Java Open Liberty Microservices Deploying applications in an OpenShift cluster using container images from Docker Hub Exposing and accessing your application in an OpenShift cluster A live demo of the app: https://credit-card.ibmdeveloper.net/","title":"Introduction"},{"location":"microservices/introduction/#introduction","text":"Microservices are an architectural approach to building applications. As an architectural framework, microservices are distributed and loosely coupled, so one team\u2019s changes won\u2019t break the entire app. The benefit to using microservices is that development teams are able to rapidly build new components of apps to meet changing business needs. You can build polyglot microservices Each microservice can be assigned to a team Scale each independently Can provide resiliency","title":"Introduction"},{"location":"microservices/introduction/#the-example-bank-application","text":"The example bank system includes several microservices for handling user authentication and transaction mechanics. This lab focuses on the java microservices components that is part of the Example Bank app. Build and push Java Open Liberty Microservices Deploying applications in an OpenShift cluster using container images from Docker Hub Exposing and accessing your application in an OpenShift cluster A live demo of the app: https://credit-card.ibmdeveloper.net/","title":"The example bank application"},{"location":"microservices/part1/","text":"Part 1 \u00b6 Quickly install previous workshops Build Java microservices 1. Quickly install previous workshops \u00b6 This step lets you quickly install the components that was deployed in Identity Management workshop and Operator workshop Clone the repo example-bank $ git clone https://github.com/IBM/example-bank $ cd example-bank/scripts Log in your IBM Cloud account with the ibmcloud cli Make sure to use your personal account when it asks you. $ ibmcloud login -u YOUR_IBM_CLOUD_EMAIL Create an App ID instance using the script. $ ./createappid.sh App ID instance created and configured Management server: https://**.appid.cloud.ibm.com/management/v4/** Api key: YOUR_API_KEY Auto-generated appid-example-bank-credentials Then export the App ID instance's management server and the API key. $ export MGMTEP=https://**.appid.cloud.ibm.com/management/v4/** $ export APIKEY=YOUR_API_KEY Log in with the OpenShift cluster provided for you using the OpenShift console. On the upper right corner, click your account and then click on Copy Login Command . This should open a new window and show you the command to login with the oc cli Create a project called example-bank $ oc new-project example-bank Deploy a Postgres instance in your OpenShift cluster $ ./deploy-db.sh clusterserviceversion.operators.coreos.com/postgresql-operator.v0.1.1 created subscription.operators.coreos.com/postgresql-operator-dev4devs-com created operatorgroup.operators.coreos.com/example-bank-rgc7j unchanged deployment.apps/postgresql-operator created database.postgresql.dev4devs.com/creditdb created Create secrets using the script below. This creates the necessary secrets in your OpenShift cluster $ ./createsecrets.sh $MGMTEP $APIKEY Deploy the front end microservice from the Identity Management Workshop $ cd .. $ oc apply -f deployment.yaml 2. Build Java microservices \u00b6 Build the microservices - user, transaction, and erasure microservices. You'll also build an image that would load the proper schema in the database. First, you can build the schema and database model loader. ## make sure your are in the root directory of the example-bank repo $ export DOCKER_HUB_USER=your-dockerhub-username $ docker build -t $DOCKER_HUB_USER/lab-data:1.0 data_model Then, build the transaction and user microservices $ cd bank-app-backend $ mvn -pl :transaction-service -am package $ mvn -pl :user-service -am package $ docker build -t $DOCKER_HUB_USER/lab-transaction:1.0 transaction-service $ docker build -t $DOCKER_HUB_USER/lab-user:1.0 user-service Then, build the erasure service $ cd ../bank-user-cleanup-utility $ mvn package $ docker build -t $DOCKER_HUB_USER/lab-erasure:1.0 . You can now push the container images you built $ docker login $ docker push $DOCKER_HUB_USER/lab-data:1.0 $ docker push $DOCKER_HUB_USER/lab-transaction:1.0 $ docker push $DOCKER_HUB_USER/lab-user:1.0 $ docker push $DOCKER_HUB_USER/lab-erasure:1.0","title":"Part 1"},{"location":"microservices/part1/#part-1","text":"Quickly install previous workshops Build Java microservices","title":"Part 1"},{"location":"microservices/part1/#1-quickly-install-previous-workshops","text":"This step lets you quickly install the components that was deployed in Identity Management workshop and Operator workshop Clone the repo example-bank $ git clone https://github.com/IBM/example-bank $ cd example-bank/scripts Log in your IBM Cloud account with the ibmcloud cli Make sure to use your personal account when it asks you. $ ibmcloud login -u YOUR_IBM_CLOUD_EMAIL Create an App ID instance using the script. $ ./createappid.sh App ID instance created and configured Management server: https://**.appid.cloud.ibm.com/management/v4/** Api key: YOUR_API_KEY Auto-generated appid-example-bank-credentials Then export the App ID instance's management server and the API key. $ export MGMTEP=https://**.appid.cloud.ibm.com/management/v4/** $ export APIKEY=YOUR_API_KEY Log in with the OpenShift cluster provided for you using the OpenShift console. On the upper right corner, click your account and then click on Copy Login Command . This should open a new window and show you the command to login with the oc cli Create a project called example-bank $ oc new-project example-bank Deploy a Postgres instance in your OpenShift cluster $ ./deploy-db.sh clusterserviceversion.operators.coreos.com/postgresql-operator.v0.1.1 created subscription.operators.coreos.com/postgresql-operator-dev4devs-com created operatorgroup.operators.coreos.com/example-bank-rgc7j unchanged deployment.apps/postgresql-operator created database.postgresql.dev4devs.com/creditdb created Create secrets using the script below. This creates the necessary secrets in your OpenShift cluster $ ./createsecrets.sh $MGMTEP $APIKEY Deploy the front end microservice from the Identity Management Workshop $ cd .. $ oc apply -f deployment.yaml","title":"1. Quickly install previous workshops"},{"location":"microservices/part1/#2-build-java-microservices","text":"Build the microservices - user, transaction, and erasure microservices. You'll also build an image that would load the proper schema in the database. First, you can build the schema and database model loader. ## make sure your are in the root directory of the example-bank repo $ export DOCKER_HUB_USER=your-dockerhub-username $ docker build -t $DOCKER_HUB_USER/lab-data:1.0 data_model Then, build the transaction and user microservices $ cd bank-app-backend $ mvn -pl :transaction-service -am package $ mvn -pl :user-service -am package $ docker build -t $DOCKER_HUB_USER/lab-transaction:1.0 transaction-service $ docker build -t $DOCKER_HUB_USER/lab-user:1.0 user-service Then, build the erasure service $ cd ../bank-user-cleanup-utility $ mvn package $ docker build -t $DOCKER_HUB_USER/lab-erasure:1.0 . You can now push the container images you built $ docker login $ docker push $DOCKER_HUB_USER/lab-data:1.0 $ docker push $DOCKER_HUB_USER/lab-transaction:1.0 $ docker push $DOCKER_HUB_USER/lab-user:1.0 $ docker push $DOCKER_HUB_USER/lab-erasure:1.0","title":"2. Build Java microservices"},{"location":"microservices/part2/","text":"Part 2 \u00b6 In this part, we will deploy the images built in part 1 to our cluster. Update YAML deployment manifests to point at correct images: 1. data_model/job.yaml => anthonyamanse/lab-data:1.0 2. bank-app-backend/transaction-service/deployment.yaml ==> anthonyamanse/lab-transaction:1.0 3. bank-app-backend/user-service/deployment.yaml ==> anthonyamanse/lab-user:1.0 4. bank-user-cleanup-utility/job.yaml ==> anthonyamanse/lab-erasure:1.0 Note: The mobile simulator is already deployed. Run database schema job. cd data_model oc apply -f job.yaml Verify that the database schema load succeeded. theia@theiadocker-koyfman1:/home/project/example-bank/data_model$ oc logs cc-schema-load-<pod name> Output will resemble: postgresql-operator-58cb79c899-69qpn 1/1 Running 0 99m theia@theiadocker-koyfman1:/home/project/example-bank/data_model$ oc logs cc-schema-load-9tz6f CREATE EXTENSION CREATE DATABASE You are now connected to database \"example\" as user \"postgres\". CREATE SCHEMA SET CREATE TABLE CREATE TABLE CREATE TABLE CREATE TABLE Now, we can deploy the services: oc apply -f bank-app-backend/user-service/deployment.yaml -f bank-app-backend/transaction-service/deployment.yaml -f bank-user-cleanup-utility/job.yaml Wait until deployments are complete. Find route to access simulator: theia@theiadocker-koyfman1:/home/project/example-bank$ oc get routes | grep simulator","title":"Part 2"},{"location":"microservices/part2/#part-2","text":"In this part, we will deploy the images built in part 1 to our cluster. Update YAML deployment manifests to point at correct images: 1. data_model/job.yaml => anthonyamanse/lab-data:1.0 2. bank-app-backend/transaction-service/deployment.yaml ==> anthonyamanse/lab-transaction:1.0 3. bank-app-backend/user-service/deployment.yaml ==> anthonyamanse/lab-user:1.0 4. bank-user-cleanup-utility/job.yaml ==> anthonyamanse/lab-erasure:1.0 Note: The mobile simulator is already deployed. Run database schema job. cd data_model oc apply -f job.yaml Verify that the database schema load succeeded. theia@theiadocker-koyfman1:/home/project/example-bank/data_model$ oc logs cc-schema-load-<pod name> Output will resemble: postgresql-operator-58cb79c899-69qpn 1/1 Running 0 99m theia@theiadocker-koyfman1:/home/project/example-bank/data_model$ oc logs cc-schema-load-9tz6f CREATE EXTENSION CREATE DATABASE You are now connected to database \"example\" as user \"postgres\". CREATE SCHEMA SET CREATE TABLE CREATE TABLE CREATE TABLE CREATE TABLE Now, we can deploy the services: oc apply -f bank-app-backend/user-service/deployment.yaml -f bank-app-backend/transaction-service/deployment.yaml -f bank-user-cleanup-utility/job.yaml Wait until deployments are complete. Find route to access simulator: theia@theiadocker-koyfman1:/home/project/example-bank$ oc get routes | grep simulator","title":"Part 2"},{"location":"microservices/prerequisites/","text":"Prerequisites \u00b6 Docker Hub account IBM Cloud account Grab an OpenShift Cluster for this workshop Grant cluster url: https://cloud-lab.mybluemix.net/ Lab Key is oslab https://labs.cognitiveclass.ai/ virtual environment with IDE and shell terminal OR you can choose to use the terminal in your own local environment Docker install ibmcloud cli install oc cli jq - command line JSON parser","title":"Prerequisites"},{"location":"microservices/prerequisites/#prerequisites","text":"Docker Hub account IBM Cloud account Grab an OpenShift Cluster for this workshop Grant cluster url: https://cloud-lab.mybluemix.net/ Lab Key is oslab https://labs.cognitiveclass.ai/ virtual environment with IDE and shell terminal OR you can choose to use the terminal in your own local environment Docker install ibmcloud cli install oc cli jq - command line JSON parser","title":"Prerequisites"},{"location":"microservices/lab3/","text":"Introduction \u00b6 A lab in two parts to install the microservices of the Example-Bank application. About this workshop \u00b6 This series has an additional presentation. Agenda \u00b6 Part 1 Part 2 Credits \u00b6 Anthony Amanse Yan Koyfman Badge \u00b6 After completion of the workshop, you can collect your badge","title":"About Lab 3"},{"location":"microservices/lab3/#introduction","text":"A lab in two parts to install the microservices of the Example-Bank application.","title":"Introduction"},{"location":"microservices/lab3/#about-this-workshop","text":"This series has an additional presentation.","title":"About this workshop"},{"location":"microservices/lab3/#agenda","text":"Part 1 Part 2","title":"Agenda"},{"location":"microservices/lab3/#credits","text":"Anthony Amanse Yan Koyfman","title":"Credits"},{"location":"microservices/lab3/#badge","text":"After completion of the workshop, you can collect your badge","title":"Badge"},{"location":"microservices/lab3/intro/","text":"Tekton is a powerful yet flexible Kubernetes-native open-source framework for creating continuous integration and delivery (CI/CD) systems. It lets you build, test, and deploy across multiple cloud providers or on-premises systems by abstracting away the underlying implementation details.","title":"Intro"},{"location":"microservices/lab3/lab3/","text":"Part 1 \u00b6 The back end of Example Bank is what this tutorial deploys through a pipeline. It consists of several microservices, including two Java services to process transactions and users respectively, a Node.js front end, and a PostgreSQL instance to keep track of it all. 0. \u00b6 Agenda: Intro to OpenShift / microservices. Demo Example Bank app Go over architecture of the app. Set up OpenShift project and required services. Build and deploy your own instance of Example Bank Intro: - Demo credit-card.ibmdeveloper.net. (2 min). - architecture app id and back-end (2 min). Mention these (not actually done during lab.) 1. Get cluster: Follow instructions. (Common for all labs.) 2. Create Docker Hub profile for images. (Prereq.) 3. Get oc login token to log into cluster via CLI. Start: Log in into cognitiveclass.ai - and create shell. IBM login for user account - for App Id. AppId: Run createappid.sh save: App ID info: Management server: https://us-south.appid.cloud.ibm.com/management/v4/6f83b8fb-28e2-48e6-9dc4-dada122d99c7 Api key: fpYOiyM-48eR72LsKpmc3TL2WnrrntrOeLYfuCc9PjDI In browser, go to your OpenShift cluster and get token. Talk about how you don't need to switch logins in the CLI. Login to cluster in your web terminal. Create example-bank project if not there. .. show oc new-project example-bank or oc project example-bank . PostgresDB: Run deploy-db.sh : deploys operator and database instance for Example Bank. Secrets: createsecrets.sh : koyfman@cloudshell:~/bank/example-bank/scripts$ sh ./createsecrets.sh https://us-south.appid.cloud.ibm.com/management/v4/6f83b8fb-28e2-48e6-9dc4-dada122d99c7 fpYOiyM-48eR72LsKpmc3TL2WnrrntrOeLYfuCc9PjDI Deploy microservices: Build docker images and push to your personal Docker Hub account. docker build -t ykoyfman/lab-ui-1 . cd data_model docker build -t ykoyfman/lab-data-1 . cd ../bank-app-backend/ mvn -pl :user-service -am package docker build -t ykoyfman/lab-tx-1 transaction-service docker build -t ykoyfman/lab-user-1 user-service cd ../bank-user-cleanup-utility mvn package docker build -t ykoyfman/lab-cleanup-1 . docker login docker push <all images> Part 2 \u00b6 Update YAML deployment manifests to point at correct images - five files. Run database schema job. cd data_model oc apply -f job.yaml Output: theia@theiadocker-koyfman1:/home/project/example-bank/data_model$ oc get pods NAME READY STATUS RESTARTS AGE cc-schema-load-9tz6f 0/1 ContainerCreating 0 5s creditdb-77c6b6785d-vnxtv 1/1 Running 1 98m postgresql-operator-58cb79c899-69qpn 1/1 Running 0 98m theia@theiadocker-koyfman1:/home/project/example-bank/data_model$ oc get pods NAME READY STATUS RESTARTS AGE cc-schema-load-9tz6f 0/1 Completed 0 42s creditdb-77c6b6785d-vnxtv 1/1 Running 1 99m postgresql-operator-58cb79c899-69qpn 1/1 Running 0 99m theia@theiadocker-koyfman1:/home/project/example-bank/data_model$ oc logs cc-schema-load-9tz6f CREATE EXTENSION CREATE DATABASE You are now connected to database \"example\" as user \"postgres\". CREATE SCHEMA SET CREATE TABLE CREATE TABLE CREATE TABLE CREATE TABLE oc apply -f deployment.yaml -f bank-app-backend/user-service/deployment.yaml -f bank-app-backend/transaction-service/deployment.yaml Find route to access simulator: theia@theiadocker-koyfman1:/home/project/example-bank$ oc get routes NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD mobile-simulator-service mobile-simulator-service-example-bank.koyfman-os44-aug5-f2c6cdc6801be85fd188b09d006f13e3-0000.us-east.containers.appdomain.cloud Summary \u00b6","title":"Lab3"},{"location":"microservices/lab3/lab3/#part-1","text":"The back end of Example Bank is what this tutorial deploys through a pipeline. It consists of several microservices, including two Java services to process transactions and users respectively, a Node.js front end, and a PostgreSQL instance to keep track of it all.","title":"Part 1"},{"location":"microservices/lab3/lab3/#0","text":"Agenda: Intro to OpenShift / microservices. Demo Example Bank app Go over architecture of the app. Set up OpenShift project and required services. Build and deploy your own instance of Example Bank Intro: - Demo credit-card.ibmdeveloper.net. (2 min). - architecture app id and back-end (2 min). Mention these (not actually done during lab.) 1. Get cluster: Follow instructions. (Common for all labs.) 2. Create Docker Hub profile for images. (Prereq.) 3. Get oc login token to log into cluster via CLI. Start: Log in into cognitiveclass.ai - and create shell. IBM login for user account - for App Id. AppId: Run createappid.sh save: App ID info: Management server: https://us-south.appid.cloud.ibm.com/management/v4/6f83b8fb-28e2-48e6-9dc4-dada122d99c7 Api key: fpYOiyM-48eR72LsKpmc3TL2WnrrntrOeLYfuCc9PjDI In browser, go to your OpenShift cluster and get token. Talk about how you don't need to switch logins in the CLI. Login to cluster in your web terminal. Create example-bank project if not there. .. show oc new-project example-bank or oc project example-bank . PostgresDB: Run deploy-db.sh : deploys operator and database instance for Example Bank. Secrets: createsecrets.sh : koyfman@cloudshell:~/bank/example-bank/scripts$ sh ./createsecrets.sh https://us-south.appid.cloud.ibm.com/management/v4/6f83b8fb-28e2-48e6-9dc4-dada122d99c7 fpYOiyM-48eR72LsKpmc3TL2WnrrntrOeLYfuCc9PjDI Deploy microservices: Build docker images and push to your personal Docker Hub account. docker build -t ykoyfman/lab-ui-1 . cd data_model docker build -t ykoyfman/lab-data-1 . cd ../bank-app-backend/ mvn -pl :user-service -am package docker build -t ykoyfman/lab-tx-1 transaction-service docker build -t ykoyfman/lab-user-1 user-service cd ../bank-user-cleanup-utility mvn package docker build -t ykoyfman/lab-cleanup-1 . docker login docker push <all images>","title":"0."},{"location":"microservices/lab3/lab3/#part-2","text":"Update YAML deployment manifests to point at correct images - five files. Run database schema job. cd data_model oc apply -f job.yaml Output: theia@theiadocker-koyfman1:/home/project/example-bank/data_model$ oc get pods NAME READY STATUS RESTARTS AGE cc-schema-load-9tz6f 0/1 ContainerCreating 0 5s creditdb-77c6b6785d-vnxtv 1/1 Running 1 98m postgresql-operator-58cb79c899-69qpn 1/1 Running 0 98m theia@theiadocker-koyfman1:/home/project/example-bank/data_model$ oc get pods NAME READY STATUS RESTARTS AGE cc-schema-load-9tz6f 0/1 Completed 0 42s creditdb-77c6b6785d-vnxtv 1/1 Running 1 99m postgresql-operator-58cb79c899-69qpn 1/1 Running 0 99m theia@theiadocker-koyfman1:/home/project/example-bank/data_model$ oc logs cc-schema-load-9tz6f CREATE EXTENSION CREATE DATABASE You are now connected to database \"example\" as user \"postgres\". CREATE SCHEMA SET CREATE TABLE CREATE TABLE CREATE TABLE CREATE TABLE oc apply -f deployment.yaml -f bank-app-backend/user-service/deployment.yaml -f bank-app-backend/transaction-service/deployment.yaml Find route to access simulator: theia@theiadocker-koyfman1:/home/project/example-bank$ oc get routes NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD mobile-simulator-service mobile-simulator-service-example-bank.koyfman-os44-aug5-f2c6cdc6801be85fd188b09d006f13e3-0000.us-east.containers.appdomain.cloud","title":"Part 2"},{"location":"microservices/lab3/lab3/#summary","text":"","title":"Summary"},{"location":"microservices/lab3/tasks/","text":"tbd","title":"Tasks"},{"location":"microservices/lab3/tooling/","text":"tbd","title":"Tooling"},{"location":"operators/","text":"What are Operators? \u00b6 From RedHat's own website: \"An Operator is a method of packaging, deploying and managing a Kubernetes-native application. A Kubernetes-native application is an application that is both deployed on Kubernetes and managed using the Kubernetes APIs and kubectl tooling.\" What does that mean? If the software you are intersted is using has an operator, that operator is something you can use to install that software in your cluster. Operator Framework \u00b6 \"The Operator Framework is an open source project that provides developers and cluster administrators tooling to accelerate development and deployment of an Operator.\"","title":"Introduction"},{"location":"operators/#what-are-operators","text":"From RedHat's own website: \"An Operator is a method of packaging, deploying and managing a Kubernetes-native application. A Kubernetes-native application is an application that is both deployed on Kubernetes and managed using the Kubernetes APIs and kubectl tooling.\" What does that mean? If the software you are intersted is using has an operator, that operator is something you can use to install that software in your cluster.","title":"What are Operators?"},{"location":"operators/#operator-framework","text":"\"The Operator Framework is an open source project that provides developers and cluster administrators tooling to accelerate development and deployment of an Operator.\"","title":"Operator Framework"},{"location":"operators/lab2/","text":"Use the IBM Cloud console to launch the OpenShift web console First create an 'Example Bank' namespace From the navigation menu on the left select Operators \u2192 OperatorHub Type 'Postgres' into the search bar, and select the PostgreSQL Operator by Dev4Ddevs.com tile. Click Continue to show the community operator and then Install Be sure you are installing the Operator in the Example Bank namespace, and click Subscribe Status will show \"Succeeded: Up to date\" when complete Use the very top drop down in the navigation menu on the left to switch to Developer* view Click +Add and select the Databse tile Choose the Database Database tile and then Create You can edit some of the specifics of the database here. For example, change the name to creditdb and click Create Switch to the Topology tab, and watch your database creation complete! Now we will need some CLI access. First, go to https://labs.cognitiveclass.ai and start a session back on your OpenShift web console, click you email address in the upper right corner and choose Copy Login Command From the resulting screen, grab your login credentials, and copy them into your ClognitiveClass terminal switch to the example bank project git clone https://github.com/IBM/example-bank kubectl create secret generic bank-db-secret --from-literal=DB_SERVERNAME=<db_name> --from-literal=DB_PORTNUMBER=<db_port> --from-literal=DB_DATABASENAME=example --from-literal=DB_USER=<db_user> --from-literal=DB_PASSWORD=<db_password> Run the script to create the schema oc apply -f data_model/job.yaml expose the database $ oc expose deploy creditdb --port=5432 --target-port=5432 --type=LoadBalancer --name my-pg-svc oc get svc take the external ip address and connect to it docker run -it --rm postgres psql -h <ip> -U postgres \\c example \\dt *.","title":"Lab2"},{"location":"operators/lab2_create/","text":"Use the very top drop down in the navigation menu on the left to switch to Developer* view Click +Add and select the Database tile Choose the Database Database tile and then Create You can edit some of the specifics of the database here. For example, change the name to creditdb and click Create Switch to the Topology tab, and watch your database creation complete!","title":"Create an instance of a database"},{"location":"operators/lab2_expose/","text":"expose the database $ oc expose deploy creditdb --port=5432 --target-port=5432 --type=LoadBalancer --name my-pg-svc to find the external ip address of the database oc get svc copy the external ip address of the my-pg-svc service and connect to it. password is postgres docker run -it --rm postgres psql -h <ip> -U postgres verify database tables \\c example \\dt *.","title":"Expose and verify"},{"location":"operators/lab2_install/","text":"Use the IBM Cloud console to launch the OpenShift web console First create an 'Example Bank' namespace From the navigation menu on the left select Operators \u2192 OperatorHub Type 'Postgres' into the search bar, and select the PostgreSQL Operator by Dev4Ddevs.com tile. Click Continue to show the community operator and then Install Be sure you are installing the Operator in the Example Bank namespace, and click Subscribe Status will show \"Succeeded: Up to date\" when complete","title":"Install the PostgreSQL Operator"},{"location":"operators/lab2_load/","text":"Now we will need some CLI access. First, go to https://labs.cognitiveclass.ai and start a Theia - Cloud IDE (With OpenShift) session back on your OpenShift web console, click you email address in the upper right corner and choose Copy Login Command From the resulting screen, grab your login credentials, and copy them into your ClognitiveClass terminal switch to the example bank project git clone https://github.com/IBM/example-bank Create a secret so the script that loads the schema can access the database kubectl create secret generic bank-db-secret --from-literal=DB_SERVERNAME=creditdb --from-literal=DB_PORTNUMBER=5432 --from-literal=DB_DATABASENAME=example --from-literal=DB_USER=postgres --from-literal=DB_PASSWORD=postgres Run the script to create the schema oc apply -f data_model/job.yaml","title":"Load the schema"},{"location":"operators/lab2/","text":"Introduction \u00b6 A series of labs detailing the examination of OperatorHub in an OpenShift cluster and using it to deploy the database section of the Example-Bank application. About this workshop \u00b6 This series has an additional presentation. Agenda \u00b6 Install the PostgreSQL Operator Create an instance of a database Load the schema Expose and verify Credits \u00b6 Olaph Wagoner Yan Koyfman","title":"About Lab 2"},{"location":"operators/lab2/#introduction","text":"A series of labs detailing the examination of OperatorHub in an OpenShift cluster and using it to deploy the database section of the Example-Bank application.","title":"Introduction"},{"location":"operators/lab2/#about-this-workshop","text":"This series has an additional presentation.","title":"About this workshop"},{"location":"operators/lab2/#agenda","text":"Install the PostgreSQL Operator Create an instance of a database Load the schema Expose and verify","title":"Agenda"},{"location":"operators/lab2/#credits","text":"Olaph Wagoner Yan Koyfman","title":"Credits"},{"location":"oss/","text":"Introduction \u00b6 A lab in two parts to install the microservices of the Example-Bank application. About this workshop \u00b6 This series has an additional presentation. Agenda \u00b6 Database setup Part 1 Part 2 Credits \u00b6 Anthony Amanse Yan Koyfman","title":"About Lab 3B"},{"location":"oss/#introduction","text":"A lab in two parts to install the microservices of the Example-Bank application.","title":"Introduction"},{"location":"oss/#about-this-workshop","text":"This series has an additional presentation.","title":"About this workshop"},{"location":"oss/#agenda","text":"Database setup Part 1 Part 2","title":"Agenda"},{"location":"oss/#credits","text":"Anthony Amanse Yan Koyfman","title":"Credits"},{"location":"oss/part1/","text":"Part 1 \u00b6 1. Quickly install dependencies \u00b6 This step lets you quickly install App Id $ cd example-bank/scripts Log in your IBM Cloud account with the ibmcloud cli Make sure to use your personal account when it asks you. $ ibmcloud login -u YOUR_IBM_CLOUD_EMAIL Create an App ID instance using the script. $ ./createappid.sh App ID instance created and configured Management server: https://**.appid.cloud.ibm.com/management/v4/** Api key: YOUR_API_KEY Auto-generated appid-example-bank-credentials Then export the App ID instance's management server and the API key. $ export MGMTEP=https://**.appid.cloud.ibm.com/management/v4/** $ export APIKEY=YOUR_API_KEY Log in with the OpenShift cluster provided for you using the OpenShift console. On the upper right corner, click your account and then click on Copy Login Command . This should open a new window and show you the command to login with the oc cli Create secrets using the script below. This creates the necessary secrets in your OpenShift cluster $ ./createsecrets.sh $MGMTEP $APIKEY Deploy the front end microservice from the Identity Management Workshop $ cd .. $ oc apply -f deployment.yaml 2. Build Java microservices \u00b6 Build the microservices - user, transaction, and erasure microservices. $ cd bank-app-backend $ mvn -pl :transaction-service -am package $ mvn -pl :user-service -am package $ docker build -t $DOCKER_HUB_USER/lab-transaction:1.0 transaction-service $ docker build -t $DOCKER_HUB_USER/lab-user:1.0 user-service Then, build the erasure service $ cd ../bank-user-cleanup-utility $ mvn package $ docker build -t $DOCKER_HUB_USER/lab-erasure:1.0 . You can now push the container images you built $ docker login $ docker push $DOCKER_HUB_USER/lab-transaction:1.0 $ docker push $DOCKER_HUB_USER/lab-user:1.0 $ docker push $DOCKER_HUB_USER/lab-erasure:1.0","title":"Part 1"},{"location":"oss/part1/#part-1","text":"","title":"Part 1"},{"location":"oss/part1/#1-quickly-install-dependencies","text":"This step lets you quickly install App Id $ cd example-bank/scripts Log in your IBM Cloud account with the ibmcloud cli Make sure to use your personal account when it asks you. $ ibmcloud login -u YOUR_IBM_CLOUD_EMAIL Create an App ID instance using the script. $ ./createappid.sh App ID instance created and configured Management server: https://**.appid.cloud.ibm.com/management/v4/** Api key: YOUR_API_KEY Auto-generated appid-example-bank-credentials Then export the App ID instance's management server and the API key. $ export MGMTEP=https://**.appid.cloud.ibm.com/management/v4/** $ export APIKEY=YOUR_API_KEY Log in with the OpenShift cluster provided for you using the OpenShift console. On the upper right corner, click your account and then click on Copy Login Command . This should open a new window and show you the command to login with the oc cli Create secrets using the script below. This creates the necessary secrets in your OpenShift cluster $ ./createsecrets.sh $MGMTEP $APIKEY Deploy the front end microservice from the Identity Management Workshop $ cd .. $ oc apply -f deployment.yaml","title":"1. Quickly install dependencies"},{"location":"oss/part1/#2-build-java-microservices","text":"Build the microservices - user, transaction, and erasure microservices. $ cd bank-app-backend $ mvn -pl :transaction-service -am package $ mvn -pl :user-service -am package $ docker build -t $DOCKER_HUB_USER/lab-transaction:1.0 transaction-service $ docker build -t $DOCKER_HUB_USER/lab-user:1.0 user-service Then, build the erasure service $ cd ../bank-user-cleanup-utility $ mvn package $ docker build -t $DOCKER_HUB_USER/lab-erasure:1.0 . You can now push the container images you built $ docker login $ docker push $DOCKER_HUB_USER/lab-transaction:1.0 $ docker push $DOCKER_HUB_USER/lab-user:1.0 $ docker push $DOCKER_HUB_USER/lab-erasure:1.0","title":"2. Build Java microservices"},{"location":"oss/part2/","text":"Part 2 \u00b6 In this part, we will deploy the images built in part 1 to our cluster. Update YAML deployment manifests to point at correct images: 1. bank-app-backend/transaction-service/deployment.yaml ==> <your_dockerhub>/lab-transaction:1.0 2. bank-app-backend/user-service/deployment.yaml ==> <your_dockerhub>/lab-user:1.0 3. bank-user-cleanup-utility/job.yaml ==> <your_dockerhub>/lab-erasure:1.0 Note: The mobile simulator is already deployed. Now, we can deploy the services: oc apply -f bank-app-backend/user-service/deployment.yaml -f bank-app-backend/transaction-service/deployment.yaml -f bank-user-cleanup-utility/job.yaml Wait until deployments are complete. Find route to access simulator: theia@theiadocker-koyfman1:/home/project/example-bank$ oc get routes | grep simulator","title":"Part 2"},{"location":"oss/part2/#part-2","text":"In this part, we will deploy the images built in part 1 to our cluster. Update YAML deployment manifests to point at correct images: 1. bank-app-backend/transaction-service/deployment.yaml ==> <your_dockerhub>/lab-transaction:1.0 2. bank-app-backend/user-service/deployment.yaml ==> <your_dockerhub>/lab-user:1.0 3. bank-user-cleanup-utility/job.yaml ==> <your_dockerhub>/lab-erasure:1.0 Note: The mobile simulator is already deployed. Now, we can deploy the services: oc apply -f bank-app-backend/user-service/deployment.yaml -f bank-app-backend/transaction-service/deployment.yaml -f bank-user-cleanup-utility/job.yaml Wait until deployments are complete. Find route to access simulator: theia@theiadocker-koyfman1:/home/project/example-bank$ oc get routes | grep simulator","title":"Part 2"},{"location":"oss/pg_full/","text":"Use the IBM Cloud console to launch the OpenShift web console First create an 'Example Bank' namespace From the navigation menu on the left select Operators \u2192 OperatorHub Type 'Postgres' into the search bar, and select the PostgreSQL Operator by Dev4Ddevs.com tile. Click Continue to show the community operator and then Install Be sure you are installing the Operator in the Example Bank namespace, and click Subscribe Status will show \"Succeeded: Up to date\" when complete Use the very top drop down in the navigation menu on the left to switch to Developer* view Click +Add and select the Database tile Choose the Database Database tile and then Create You can edit some of the specifics of the database here. For example, change the name to creditdb and click Create Switch to the Topology tab, and watch your database creation complete! Use the very top drop down in the navigation menu on the left to switch to Developer* view Click +Add and select the Database tile Choose the Database Database tile and then Create You can edit some of the specifics of the database here. For example, change the name to creditdb and click Create Switch to the Topology tab, and watch your database creation complete! Now we will need some CLI access. First, go to https://labs.cognitiveclass.ai and start a Theia - Cloud IDE (With OpenShift) session back on your OpenShift web console, click you email address in the upper right corner and choose Copy Login Command From the resulting screen, grab your login credentials, and copy them into your ClognitiveClass terminal switch to the example bank project: oc project example-bank Create a secret so the script that loads the schema can access the database kubectl create secret generic bank-db-secret --from-literal=DB_SERVERNAME=creditdb --from-literal=DB_PORTNUMBER=5432 --from-literal=DB_DATABASENAME=example --from-literal=DB_USER=postgres --from-literal=DB_PASSWORD=postgres Run the job to create the schema oc apply -f data_model/job.yaml Verify that the schema load succeeded: oc logs cc-schema-load-<pod> Now that the database is ready, we can build and deploy the remaining microservices.","title":"Database setup"},{"location":"oss/prerequisites/","text":"Prerequisites \u00b6 Docker Hub account IBM Cloud account Grab an OpenShift Cluster for this workshop Grant cluster url: https://osstutorial.mybluemix.net/ Lab Key is oslab https://labs.cognitiveclass.ai/ virtual environment with IDE and shell terminal OR you can choose to use the terminal in your own local environment Docker install ibmcloud cli install oc cli jq - command line JSON parser","title":"Prerequisites"},{"location":"oss/prerequisites/#prerequisites","text":"Docker Hub account IBM Cloud account Grab an OpenShift Cluster for this workshop Grant cluster url: https://osstutorial.mybluemix.net/ Lab Key is oslab https://labs.cognitiveclass.ai/ virtual environment with IDE and shell terminal OR you can choose to use the terminal in your own local environment Docker install ibmcloud cli install oc cli jq - command line JSON parser","title":"Prerequisites"},{"location":"pre-work/","text":"Pre-work \u00b6 This section is broken up into the following steps: Sign up for IBM Cloud Request your cluster Web-based terminal 1. Sign up for IBM Cloud \u00b6 Ensure you have an IBM Cloud ID 2. Request your cluster \u00b6 For the hands-on labs, you will be given access to a temporary free kubernetes c luster that was pre-created for the purpose of the workshop. The cluster will be deleted after the workshop. To gain access to this cluster: Open the URL that was provided to you by the instructor to access your cluster. Enter the workshop code provided by the workshop instructor and your IBM Cloud account IBM id. Select the terms and conditions checkbox and click the Submit button You will be added to a cloud account where a cluster has been pre-provisioned for you. Click on the link in the instructions which ask you to Log in to this IBM Cloud account . If you previously logged in to the IBM Cloud, the browser will direct you to the IBM Cloud resource list view (if you have not logged in previously, you will be asked to log in using your IBM Cloud ID). Expand the Clusters section and select the cluster assigned to you (the name will vary). Details for your cluster will load. Click on the Access menu item in the left navigation column, where you can find instructions to access your cluster from the command line client. Note the name of your cluster, you will use this cluster for this lab. 3. Web-based terminal \u00b6 Note: You can use any identity provider to log in to Skills Network Labs (does not have to be IBM Cloud).","title":"Pre-work"},{"location":"pre-work/#pre-work","text":"This section is broken up into the following steps: Sign up for IBM Cloud Request your cluster Web-based terminal","title":"Pre-work"},{"location":"pre-work/#1-sign-up-for-ibm-cloud","text":"Ensure you have an IBM Cloud ID","title":"1. Sign up for IBM Cloud"},{"location":"pre-work/#2-request-your-cluster","text":"For the hands-on labs, you will be given access to a temporary free kubernetes c luster that was pre-created for the purpose of the workshop. The cluster will be deleted after the workshop. To gain access to this cluster: Open the URL that was provided to you by the instructor to access your cluster. Enter the workshop code provided by the workshop instructor and your IBM Cloud account IBM id. Select the terms and conditions checkbox and click the Submit button You will be added to a cloud account where a cluster has been pre-provisioned for you. Click on the link in the instructions which ask you to Log in to this IBM Cloud account . If you previously logged in to the IBM Cloud, the browser will direct you to the IBM Cloud resource list view (if you have not logged in previously, you will be asked to log in using your IBM Cloud ID). Expand the Clusters section and select the cluster assigned to you (the name will vary). Details for your cluster will load. Click on the Access menu item in the left navigation column, where you can find instructions to access your cluster from the command line client. Note the name of your cluster, you will use this cluster for this lab.","title":"2. Request your cluster"},{"location":"pre-work/#3-web-based-terminal","text":"Note: You can use any identity provider to log in to Skills Network Labs (does not have to be IBM Cloud).","title":"3. Web-based terminal"},{"location":"serverless/introduction/example-bank-app-architecture/","text":"Example Bank App Architecture \u00b6 The example bank system includes several microservices for handling user authentication and transaction mechanics. This lab focuses on the serverless component that is part of the Example Bank app. Install OpenShift Serverless with Operator Hub Build and Push container images Deploy serverless application to OpenShift A live demo of the app: https://credit-card.ibmdeveloper.net/","title":"Introduction"},{"location":"serverless/introduction/example-bank-app-architecture/#example-bank-app-architecture","text":"The example bank system includes several microservices for handling user authentication and transaction mechanics. This lab focuses on the serverless component that is part of the Example Bank app. Install OpenShift Serverless with Operator Hub Build and Push container images Deploy serverless application to OpenShift A live demo of the app: https://credit-card.ibmdeveloper.net/","title":"Example Bank App Architecture"},{"location":"serverless/introduction/prerequisites/","text":"Prerequisites \u00b6 Docker Hub account IBM Cloud account Grab an OpenShift Cluster for this workshop https://labs.cognitiveclass.ai/ virtual environment with IDE and shell terminal OR you can choose to use the terminal in your own local environment Docker install ibmcloud cli install oc cli Identity Management, Operator, Microservice Workshops You can also use the scripts provided to deploy the components quickly if you didn't go through with those workshops.","title":"Prerequisites"},{"location":"serverless/introduction/prerequisites/#prerequisites","text":"Docker Hub account IBM Cloud account Grab an OpenShift Cluster for this workshop https://labs.cognitiveclass.ai/ virtual environment with IDE and shell terminal OR you can choose to use the terminal in your own local environment Docker install ibmcloud cli install oc cli Identity Management, Operator, Microservice Workshops You can also use the scripts provided to deploy the components quickly if you didn't go through with those workshops.","title":"Prerequisites"},{"location":"serverless/introduction/quick-install-microservices-lab/","text":"Quick Install - Identity Management, Operator, Microservices Workshops \u00b6 Clone the repo example-bank if you haven't yet $ git clone https://github.com/IBM/example-bank $ cd example-bank/scripts Log in your IBM Cloud account with the ibmcloud cli Make sure to use your personal account when it asks you. $ ibmcloud login -u YOUR_IBM_CLOUD_EMAIL Create an App ID instance using the script. $ ./createappid.sh App ID instance created and configured Management server: https://**.appid.cloud.ibm.com/management/v4/** Api key: YOUR_API_KEY Auto-generated appid-example-bank-credentials Then export the App ID instance's management server and the API key. $ export MGMTEP=https://**.appid.cloud.ibm.com/management/v4/** $ export APIKEY=YOUR_API_KEY Log in with the OpenShift cluster provided for you using the OpenShift console. On the upper right corner, click your account and then click on Copy Login Command . This should open a new window and show you the command to login with the oc cli Create a project called example-bank $ oc new-project example-bank Deploy a Postgres instance in your OpenShift cluster $ ./deploy-db.sh clusterserviceversion.operators.coreos.com/postgresql-operator.v0.1.1 created subscription.operators.coreos.com/postgresql-operator-dev4devs-com created operatorgroup.operators.coreos.com/example-bank-rgc7j unchanged deployment.apps/postgresql-operator created database.postgresql.dev4devs.com/creditdb created {% hint style=\"info\" %} Make sure the database.postgresql.dev4devs.com/creditdb was deployed. If not, deploy it manually using the yaml file $ oc apply -f creditdb.yaml Create secrets using the script below. This creates the necessary secrets in your OpenShift cluster $ ./createsecrets.sh $MGMTEP $APIKEY Deploy a job that sets the schema for your database. $ cd .. $ oc apply -f data_model/job.yaml Deploy components from previous labs with prebuilt container images $ oc apply -f deployment.yaml -f bank-app-backend/user-service/deployment.yaml -f bank-app-backend/transaction-service/deployment.yaml","title":"Quick Install"},{"location":"serverless/introduction/quick-install-microservices-lab/#quick-install-identity-management-operator-microservices-workshops","text":"Clone the repo example-bank if you haven't yet $ git clone https://github.com/IBM/example-bank $ cd example-bank/scripts Log in your IBM Cloud account with the ibmcloud cli Make sure to use your personal account when it asks you. $ ibmcloud login -u YOUR_IBM_CLOUD_EMAIL Create an App ID instance using the script. $ ./createappid.sh App ID instance created and configured Management server: https://**.appid.cloud.ibm.com/management/v4/** Api key: YOUR_API_KEY Auto-generated appid-example-bank-credentials Then export the App ID instance's management server and the API key. $ export MGMTEP=https://**.appid.cloud.ibm.com/management/v4/** $ export APIKEY=YOUR_API_KEY Log in with the OpenShift cluster provided for you using the OpenShift console. On the upper right corner, click your account and then click on Copy Login Command . This should open a new window and show you the command to login with the oc cli Create a project called example-bank $ oc new-project example-bank Deploy a Postgres instance in your OpenShift cluster $ ./deploy-db.sh clusterserviceversion.operators.coreos.com/postgresql-operator.v0.1.1 created subscription.operators.coreos.com/postgresql-operator-dev4devs-com created operatorgroup.operators.coreos.com/example-bank-rgc7j unchanged deployment.apps/postgresql-operator created database.postgresql.dev4devs.com/creditdb created {% hint style=\"info\" %} Make sure the database.postgresql.dev4devs.com/creditdb was deployed. If not, deploy it manually using the yaml file $ oc apply -f creditdb.yaml Create secrets using the script below. This creates the necessary secrets in your OpenShift cluster $ ./createsecrets.sh $MGMTEP $APIKEY Deploy a job that sets the schema for your database. $ cd .. $ oc apply -f data_model/job.yaml Deploy components from previous labs with prebuilt container images $ oc apply -f deployment.yaml -f bank-app-backend/user-service/deployment.yaml -f bank-app-backend/transaction-service/deployment.yaml","title":"Quick Install - Identity Management, Operator, Microservices Workshops"},{"location":"serverless/introduction/serverless/","text":"Serverless \u00b6 Serverless is a model that allows you to build and run applications so when an event-trigger occurs, the application will automatically scale up based on incoming demand, or scale to zero after use. OpenShift Serverless on OpenShift Container Platform enables stateless serverless workloads to all run on a single multi-cloud container platform with automated operations. Developers can use a single platform for hosting their microservices, legacy, and serverless applications. OpenShift Serverless is based on the open source Knative project . Knative Serving \u00b6 Knative Serving on OpenShift Container Platform enables developers to write cloud-native applications using serverless architecture . These routine tasks are abstracted away by the platform, allowing developers to push code to production much faster than in traditional models. The Knative Serving project provides middleware primitives that enable: Rapid deployment of serverless containers Automatic scaling up and down to zero Routing and network programming Point-in-time snapshots of deployed code and configurations Knative Serving CRDs: Service, Revision, Route, Configuration Knative Eventing \u00b6 Knative Eventing on OpenShift Container Platform enables developers to use an event-driven architecture with serverless applications. An event-driven architecture is based on the concept of decoupled relationships between event producers that create events, and event sinks , or consumers, that receive them. Knative Eventing uses standard HTTP POST requests to send and receive events between event producers and consumers. These events conform to the CloudEvents specifications , which enables creating, parsing, sending, and receiving events in any programming language.","title":"Serverless"},{"location":"serverless/introduction/serverless/#serverless","text":"Serverless is a model that allows you to build and run applications so when an event-trigger occurs, the application will automatically scale up based on incoming demand, or scale to zero after use. OpenShift Serverless on OpenShift Container Platform enables stateless serverless workloads to all run on a single multi-cloud container platform with automated operations. Developers can use a single platform for hosting their microservices, legacy, and serverless applications. OpenShift Serverless is based on the open source Knative project .","title":"Serverless"},{"location":"serverless/introduction/serverless/#knative-serving","text":"Knative Serving on OpenShift Container Platform enables developers to write cloud-native applications using serverless architecture . These routine tasks are abstracted away by the platform, allowing developers to push code to production much faster than in traditional models. The Knative Serving project provides middleware primitives that enable: Rapid deployment of serverless containers Automatic scaling up and down to zero Routing and network programming Point-in-time snapshots of deployed code and configurations Knative Serving CRDs: Service, Revision, Route, Configuration","title":"Knative Serving"},{"location":"serverless/introduction/serverless/#knative-eventing","text":"Knative Eventing on OpenShift Container Platform enables developers to use an event-driven architecture with serverless applications. An event-driven architecture is based on the concept of decoupled relationships between event producers that create events, and event sinks , or consumers, that receive them. Knative Eventing uses standard HTTP POST requests to send and receive events between event producers and consumers. These events conform to the CloudEvents specifications , which enables creating, parsing, sending, and receiving events in any programming language.","title":"Knative Eventing"},{"location":"serverless/lab/","text":"Introduction \u00b6 A series of labs detailing the installion of Knative Serving in an OpenShift cluster and deploying the serverless aspects of the Example-Bank application. About this workshop \u00b6 This series has an additional presentation. Agenda \u00b6 Installing OpenShift Serverless Installing Knative Serving Clone the repo Create an admin scoped user Building the example serverless application Configure Deployment file Deploying to OpenShift Serverless Test the Serverless App Modify Serverless App Conclusion Credits \u00b6 Anthony Amanse Badge \u00b6 After completion of the workshop, you can collect your badge","title":"About Lab 4"},{"location":"serverless/lab/#introduction","text":"A series of labs detailing the installion of Knative Serving in an OpenShift cluster and deploying the serverless aspects of the Example-Bank application.","title":"Introduction"},{"location":"serverless/lab/#about-this-workshop","text":"This series has an additional presentation.","title":"About this workshop"},{"location":"serverless/lab/#agenda","text":"Installing OpenShift Serverless Installing Knative Serving Clone the repo Create an admin scoped user Building the example serverless application Configure Deployment file Deploying to OpenShift Serverless Test the Serverless App Modify Serverless App Conclusion","title":"Agenda"},{"location":"serverless/lab/#credits","text":"Anthony Amanse","title":"Credits"},{"location":"serverless/lab/#badge","text":"After completion of the workshop, you can collect your badge","title":"Badge"},{"location":"serverless/lab/building-the-example-serverless-application/","text":"Building the example serverless application \u00b6 1. Build the container image \u00b6 To build the container image, you can use docker build $ export DOCKER_USERNAME=your-docker-hub-username $ docker build -t $DOCKER_USERNAME/serverless-workshop-example:1.0 bank-knative-service 2. Push the container image \u00b6 In this lab, you can use a Docker Hub to push your container image. Make sure you are also logged in your Docker Hub account when you push the image. $ docker login $ docker push $DOCKER_USERNAME/serverless-workshop-example:1.0","title":"Building the example serverless application"},{"location":"serverless/lab/building-the-example-serverless-application/#building-the-example-serverless-application","text":"","title":"Building the example serverless application"},{"location":"serverless/lab/building-the-example-serverless-application/#1-build-the-container-image","text":"To build the container image, you can use docker build $ export DOCKER_USERNAME=your-docker-hub-username $ docker build -t $DOCKER_USERNAME/serverless-workshop-example:1.0 bank-knative-service","title":"1. Build the container image"},{"location":"serverless/lab/building-the-example-serverless-application/#2-push-the-container-image","text":"In this lab, you can use a Docker Hub to push your container image. Make sure you are also logged in your Docker Hub account when you push the image. $ docker login $ docker push $DOCKER_USERNAME/serverless-workshop-example:1.0","title":"2. Push the container image"},{"location":"serverless/lab/clone-the-repo/","text":"Clone the repo \u00b6 Clone the repo example-bank if you haven't yet $ git clone https://github.com/IBM/example-bank $ cd example-bank The source code for this lab is under bank-knative-service folder Create a project named example-bank for the resources you'll deploy. {% hint style=\"info\" %} You can skip this step if you already have created one from the previous labs. $ oc new-project example-bank Also, make sure you are using the example-bank project $ oc project example-bank","title":"Clone the repo"},{"location":"serverless/lab/clone-the-repo/#clone-the-repo","text":"Clone the repo example-bank if you haven't yet $ git clone https://github.com/IBM/example-bank $ cd example-bank The source code for this lab is under bank-knative-service folder Create a project named example-bank for the resources you'll deploy. {% hint style=\"info\" %} You can skip this step if you already have created one from the previous labs. $ oc new-project example-bank Also, make sure you are using the example-bank project $ oc project example-bank","title":"Clone the repo"},{"location":"serverless/lab/conclusion/","text":"Conclusion \u00b6 In this lab, we have used the Operator Hub to install OpenShift Serverless. We also used Node.js as our serverless application in OpenShift. We used Docker to build the image and push it to Docker Hub. We also explored on how to configure deployment files to use our container images in Docker Hub and configuring it so that it talks to other components in the cluster. Deploying the serverless app in this lab, we now have completed all the microservices in the Example Bank app. Source code: https://github.com/IBM/example-bank Knative Eventing: https://github.com/IBM/openshift-serverless-nodejs-couchdb","title":"Conclusion"},{"location":"serverless/lab/conclusion/#conclusion","text":"In this lab, we have used the Operator Hub to install OpenShift Serverless. We also used Node.js as our serverless application in OpenShift. We used Docker to build the image and push it to Docker Hub. We also explored on how to configure deployment files to use our container images in Docker Hub and configuring it so that it talks to other components in the cluster. Deploying the serverless app in this lab, we now have completed all the microservices in the Example Bank app. Source code: https://github.com/IBM/example-bank Knative Eventing: https://github.com/IBM/openshift-serverless-nodejs-couchdb","title":"Conclusion"},{"location":"serverless/lab/configure-deployment-file/","text":"Configure Deployment file \u00b6 Verify deployment file \u00b6 Open bank-knative-service/deployment.yaml file Make sure the image name is correct. It's the one you built on the previous step, Building the example serverless application containers: - image: <YOUR_DOCKER_HUB>/serverless-workshop-example:1.0 Verify the environment variables below. The secret bank-oidc-adminuser-workshop that you created will be used by this serverless app. The secret mobile-simulator-secrets was created during the previous labs. The environment variable TRANSACTION_SERVICE_URL points to the transaction microservice from the previous lab as well. envFrom: - secretRef: name: bank-oidc-adminuser-workshop - secretRef: name: mobile-simulator-secrets env: - name: TRANSACTION_SERVICE_URL value: \"http://transaction-service:9080/bank/v1/transactions\"","title":"Configure Deployment file"},{"location":"serverless/lab/configure-deployment-file/#configure-deployment-file","text":"","title":"Configure Deployment file"},{"location":"serverless/lab/configure-deployment-file/#verify-deployment-file","text":"Open bank-knative-service/deployment.yaml file Make sure the image name is correct. It's the one you built on the previous step, Building the example serverless application containers: - image: <YOUR_DOCKER_HUB>/serverless-workshop-example:1.0 Verify the environment variables below. The secret bank-oidc-adminuser-workshop that you created will be used by this serverless app. The secret mobile-simulator-secrets was created during the previous labs. The environment variable TRANSACTION_SERVICE_URL points to the transaction microservice from the previous lab as well. envFrom: - secretRef: name: bank-oidc-adminuser-workshop - secretRef: name: mobile-simulator-secrets env: - name: TRANSACTION_SERVICE_URL value: \"http://transaction-service:9080/bank/v1/transactions\"","title":"Verify deployment file"},{"location":"serverless/lab/create-an-admin-scoped-user/","text":"Create an admin scoped user \u00b6 A user with an admin scope is required to access the API that rewards the transactions with points from the transactions microservice \\(from the **microservices lab**\\) . You can create one from the App ID dashboard 1. Create a user \u00b6 In this example, you can create a user with a username of admintest and a password of password . If you choose a different one, take note of it for later use. 2. Add the role to the user \u00b6 To add a role, go to the section Cloud Directory > Users and click on the + sign beside the \"No roles assigned to user\". Then choose the admin. 3. Create a secret for the user with the admin scope \u00b6 $ oc create secret generic bank-oidc-adminuser-workshop --from-literal=APP_ID_ADMIN_USER=<your-username> --from-literal=APP_ID_ADMIN_PASSWORD=<your-password>","title":"Create an admin scoped user"},{"location":"serverless/lab/create-an-admin-scoped-user/#create-an-admin-scoped-user","text":"A user with an admin scope is required to access the API that rewards the transactions with points from the transactions microservice \\(from the **microservices lab**\\) . You can create one from the App ID dashboard","title":"Create an admin scoped user"},{"location":"serverless/lab/create-an-admin-scoped-user/#1-create-a-user","text":"In this example, you can create a user with a username of admintest and a password of password . If you choose a different one, take note of it for later use.","title":"1. Create a user"},{"location":"serverless/lab/create-an-admin-scoped-user/#2-add-the-role-to-the-user","text":"To add a role, go to the section Cloud Directory > Users and click on the + sign beside the \"No roles assigned to user\". Then choose the admin.","title":"2. Add the role to the user"},{"location":"serverless/lab/create-an-admin-scoped-user/#3-create-a-secret-for-the-user-with-the-admin-scope","text":"$ oc create secret generic bank-oidc-adminuser-workshop --from-literal=APP_ID_ADMIN_USER=<your-username> --from-literal=APP_ID_ADMIN_PASSWORD=<your-password>","title":"3. Create a secret for the user with the admin scope"},{"location":"serverless/lab/deploying-to-openshift-serverless/","text":"Deploying to OpenShift Serverless \u00b6 1. Deploy the serverless application \u00b6 $ oc apply -f bank-knative-service/deployment.yaml 2. Check status \u00b6 $ oc get kservice # or kn service list - if you have kn cli installed # NAME URL LATEST AGE CONDITIONS READY REASON # process-transaction http://process-transaction.example-bank.svc.cluster.local process-transaction-9chv6 34d 3 OK / 3 True {% hint style=\"info\" %} The serverless application can be reached at http://process-transaction.example-bank.svc.cluster.local in the example above. If it doesn't match with the one you deployed in the previous microservices lab , fix the KNATIVE_SERVICE_URL value in the bank-app-backend/transaction-service/deployment.yaml file and redeploy it again with oc apply","title":"Deploying to OpenShift Serverless"},{"location":"serverless/lab/deploying-to-openshift-serverless/#deploying-to-openshift-serverless","text":"","title":"Deploying to OpenShift Serverless"},{"location":"serverless/lab/deploying-to-openshift-serverless/#1-deploy-the-serverless-application","text":"$ oc apply -f bank-knative-service/deployment.yaml","title":"1. Deploy the serverless application"},{"location":"serverless/lab/deploying-to-openshift-serverless/#2-check-status","text":"$ oc get kservice # or kn service list - if you have kn cli installed # NAME URL LATEST AGE CONDITIONS READY REASON # process-transaction http://process-transaction.example-bank.svc.cluster.local process-transaction-9chv6 34d 3 OK / 3 True {% hint style=\"info\" %} The serverless application can be reached at http://process-transaction.example-bank.svc.cluster.local in the example above. If it doesn't match with the one you deployed in the previous microservices lab , fix the KNATIVE_SERVICE_URL value in the bank-app-backend/transaction-service/deployment.yaml file and redeploy it again with oc apply","title":"2. Check status"},{"location":"serverless/lab/installing-knative-serving/","text":"Installing Knative Serving \u00b6 To install Knative Serving, run the following commands ## CREATE NAMESPACE $ oc create namespace knative-serving ## CREATE KNATIVE SERVING RESOURCES $ cat <<EOF | oc apply -f - apiVersion: operator.knative.dev/v1alpha1 kind: KnativeServing metadata: name: knative-serving namespace: knative-serving EOF Verify the installation is complete $ oc get knativeserving.operator.knative.dev/knative-serving -n knative-serving --template='{{range .status.conditions}}{{printf \"%s=%s\\n\" .type .status}}{{end}}' DependenciesInstalled=True DeploymentsAvailable=True InstallSucceeded=True Ready=True","title":"Installing Knative Serving"},{"location":"serverless/lab/installing-knative-serving/#installing-knative-serving","text":"To install Knative Serving, run the following commands ## CREATE NAMESPACE $ oc create namespace knative-serving ## CREATE KNATIVE SERVING RESOURCES $ cat <<EOF | oc apply -f - apiVersion: operator.knative.dev/v1alpha1 kind: KnativeServing metadata: name: knative-serving namespace: knative-serving EOF Verify the installation is complete $ oc get knativeserving.operator.knative.dev/knative-serving -n knative-serving --template='{{range .status.conditions}}{{printf \"%s=%s\\n\" .type .status}}{{end}}' DependenciesInstalled=True DeploymentsAvailable=True InstallSucceeded=True Ready=True","title":"Installing Knative Serving"},{"location":"serverless/lab/installing-openshift-serverless/","text":"Installing OpenShift Serverless \u00b6 1. Open OpenShift web console from IBM Cloud \u00b6 2. Install OpenShift Serverless \u00b6 You can install the OpenShift Serverless Operator using the OperatorHub in your OpenShift dashboard. Use Update Channel version 4.5 4. Log in the oc cli \u00b6 For the next steps in the lab, you're gonna need to use the oc cli. To do this, grab the login command in your OpenShift console","title":"Installing OpenShift Serverless"},{"location":"serverless/lab/installing-openshift-serverless/#installing-openshift-serverless","text":"","title":"Installing OpenShift Serverless"},{"location":"serverless/lab/installing-openshift-serverless/#1-open-openshift-web-console-from-ibm-cloud","text":"","title":"1. Open OpenShift web console from IBM Cloud"},{"location":"serverless/lab/installing-openshift-serverless/#2-install-openshift-serverless","text":"You can install the OpenShift Serverless Operator using the OperatorHub in your OpenShift dashboard. Use Update Channel version 4.5","title":"2. Install OpenShift Serverless"},{"location":"serverless/lab/installing-openshift-serverless/#4-log-in-the-oc-cli","text":"For the next steps in the lab, you're gonna need to use the oc cli. To do this, grab the login command in your OpenShift console","title":"4. Log in the oc cli"},{"location":"serverless/lab/modify-serverless-app/","text":"Modify Serverless App \u00b6 1. Modify code \u00b6 Modify the function computeReward() section in bank-knative-service/index.js file. Modify the code so that it returns different points rewarded based on a category. ### index.js function computeReward(category, amount) { if (category == \"RIDE\") { return 2 * amount } return amount; } 2. Build and push container image \u00b6 You can now build and push the container image with the updated code. $ docker build -t $DOCKER_USERNAME/serverless-workshop-example:2.0 bank-knative-service $ docker push $DOCKER_USERNAME/serverless-workshop-example:2.0 3. Modify deployment file \u00b6 Modify the deployment file in bank-knative-service/deployment.yaml . Make sure the image name is the one you built in the previous step. containers: - image: anthonyamanse/serverless-workshop-example:2.0 4. Deploy to OpenShift \u00b6 You can now deploy the serverless app to openshift using oc apply $ oc apply -f bank-knative-service/deployment.yaml Verify its status. READY should be True $ oc get ksvc NAME URL LATESTCREATED LATESTREADY READY REASON process-transaction http://process-transaction.example-bank.svc.cluster.local process-transaction-dh7kf process-transaction-dh7kf True 5. Test using the simulator again \u00b6 $ oc get routes NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD mobile-simulator-service ***.appdomain.cloud mobile-simulator-service <all> edge None","title":"Modify Serverless App"},{"location":"serverless/lab/modify-serverless-app/#modify-serverless-app","text":"","title":"Modify Serverless App"},{"location":"serverless/lab/modify-serverless-app/#1-modify-code","text":"Modify the function computeReward() section in bank-knative-service/index.js file. Modify the code so that it returns different points rewarded based on a category. ### index.js function computeReward(category, amount) { if (category == \"RIDE\") { return 2 * amount } return amount; }","title":"1. Modify code"},{"location":"serverless/lab/modify-serverless-app/#2-build-and-push-container-image","text":"You can now build and push the container image with the updated code. $ docker build -t $DOCKER_USERNAME/serverless-workshop-example:2.0 bank-knative-service $ docker push $DOCKER_USERNAME/serverless-workshop-example:2.0","title":"2. Build and push container image"},{"location":"serverless/lab/modify-serverless-app/#3-modify-deployment-file","text":"Modify the deployment file in bank-knative-service/deployment.yaml . Make sure the image name is the one you built in the previous step. containers: - image: anthonyamanse/serverless-workshop-example:2.0","title":"3. Modify deployment file"},{"location":"serverless/lab/modify-serverless-app/#4-deploy-to-openshift","text":"You can now deploy the serverless app to openshift using oc apply $ oc apply -f bank-knative-service/deployment.yaml Verify its status. READY should be True $ oc get ksvc NAME URL LATESTCREATED LATESTREADY READY REASON process-transaction http://process-transaction.example-bank.svc.cluster.local process-transaction-dh7kf process-transaction-dh7kf True","title":"4. Deploy to OpenShift"},{"location":"serverless/lab/modify-serverless-app/#5-test-using-the-simulator-again","text":"$ oc get routes NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD mobile-simulator-service ***.appdomain.cloud mobile-simulator-service <all> edge None","title":"5. Test using the simulator again"},{"location":"serverless/lab/test-the-serverless-app/","text":"Test the Serverless App \u00b6 Test with the Example Bank app \u00b6 You can test the serverless functionality using the mobile simulator app you deployed in the previous lab. Get the mobile simulator link and open the URL in your browser. $ oc get routes NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD mobile-simulator-service ***.appdomain.cloud mobile-simulator-service <all> edge None","title":"Test the Serverless App"},{"location":"serverless/lab/test-the-serverless-app/#test-the-serverless-app","text":"","title":"Test the Serverless App"},{"location":"serverless/lab/test-the-serverless-app/#test-with-the-example-bank-app","text":"You can test the serverless functionality using the mobile simulator app you deployed in the previous lab. Get the mobile simulator link and open the URL in your browser. $ oc get routes NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD mobile-simulator-service ***.appdomain.cloud mobile-simulator-service <all> edge None","title":"Test with the Example Bank app"},{"location":"some-exercise/","text":"Exercise Title \u00b6 Description goes here. This section is comprised of the following steps: Step 1 Step 2 1. Step 1 \u00b6 Things to do in Step 1 2. Step 2 \u00b6 Things to do in Step 2","title":"Exercise Title"},{"location":"some-exercise/#exercise-title","text":"Description goes here. This section is comprised of the following steps: Step 1 Step 2","title":"Exercise Title"},{"location":"some-exercise/#1-step-1","text":"Things to do in Step 1","title":"1. Step 1"},{"location":"some-exercise/#2-step-2","text":"Things to do in Step 2","title":"2. Step 2"},{"location":"some-section/","text":"Section Title \u00b6 This is a section with many exercises.","title":"Section Title"},{"location":"some-section/#section-title","text":"This is a section with many exercises.","title":"Section Title"},{"location":"tekton/intro/","text":"Tekton is a powerful yet flexible Kubernetes-native open-source framework for creating continuous integration and delivery (CI/CD) systems. It lets you build, test, and deploy across multiple cloud providers or on-premises systems by abstracting away the underlying implementation details.","title":"What is tekton?"},{"location":"tekton/lab6/","text":"The back end of Example Bank is what this tutorial deploys through a pipeline. It consists of several microservices, including two Java services to process transactions and users respectively, a Node.js front end, and a PostgresSQL instance to keep track of it all. 1. Install Tekton \u00b6 Next up, Tekton installation. From the navigation menu on the left of your OpenShift web console, select Operators \u2192 Operators Hub and then search for the OpenShift Pipelines Operator . Click on the tile and then the subsiquent Install button. Keep the default settings on the Create Operator Subscription page and click Subscribe . 2. Create a new project \u00b6 Back in your local console, let us separate the tools from the application by creating a new project: oc new-project bank-infra 3. Create a service account \u00b6 To make sure the pipeline has the appropriate permissions to store images in the local OpenShift registry, you need to create a service account. For this tutorial, call it \"pipeline\". oc create serviceaccount pipeline oc adm policy add-scc-to-user privileged -z pipeline oc adm policy add-role-to-user edit -z pipeline oc policy add-role-to-user edit system:serviceaccount:bank-infra:pipeline -n example-bank That last command grants your service account access to the example-bank project. You should have created it as part of the prerequisites. 4. Install tasks \u00b6 Tekton Pipelines are essentially a chain of of individual tasks. This tutorial uses serveral tasks, but you can install them all at once by cloning the main code pattern repo and then targeting the pipelines/tasks folder: cd ../pipeline oc apply -f tasks 5. Create the pipeline \u00b6 The pipeline file ( example-bank-pipeline.yaml ) links together all the tasks of your pipeline, in this case consisting of: code scanning, building code into an image, and then deploying and exposing those images. kubectl apply -f example-bank-pipeline.yaml Steps for threat testing \u00b6 Did I say code scanning? Let\u2019s take this exercise in creating a pipeline a step further and introduce threat testing by including an application called SonarQube. SonarQube is open source software for inspecting a code base. It supports a plethora of languages. SonarQube can report on bugs and security vulnerabilities, as well as other helpful areas like code coverage and unit tests. This tutorial uses SonarQube to test code for vulnerabilities. 1. Deploy an instance of SonarQube \u00b6 Another file in the repo describes all the settings needed for a deployment of SonarQube. A Deployment lists all the volumes and mount paths SonarQube requires. Additionally, a Service and Route allow the app to be publicly accessible. One file contains all this information: oc apply -f sonarqube.yaml 2. Create a PVC \u00b6 You also need a Persistant Volume Claim. It allows the tasks in the pipeline to have a common place to write information to share with one another: oc apply -f bank-pvc.yaml 3. Run the pipeline \u00b6 Finally, with your vulnerability scanner in place, you can run your financial pipeline using a PipelineRun file: oc create -f bank-pipelinerun.yaml Anytime you need to rescan and/or redeploy your code base, simply run that command. Results \u00b6 Now to enjoy the fruits of our labor! SonarQube has its own web interface. To get to it, navigate to the bank-infra project in the OpenShift web console. From the menu on the left, select Networking and then Routes : Select the URL for SonarQube and check out the stats for your installation: All green! Since there are no vulnerabilites here, you can click through to check out the stats for the lines of code: Back on the Routes page, you can also find the URL for the user interface of your freshly installed Example Bank app. For the loyalty-mobile-simulator-service :","title":"Install Pipeline"},{"location":"tekton/lab6/#1-install-tekton","text":"Next up, Tekton installation. From the navigation menu on the left of your OpenShift web console, select Operators \u2192 Operators Hub and then search for the OpenShift Pipelines Operator . Click on the tile and then the subsiquent Install button. Keep the default settings on the Create Operator Subscription page and click Subscribe .","title":"1. Install Tekton"},{"location":"tekton/lab6/#2-create-a-new-project","text":"Back in your local console, let us separate the tools from the application by creating a new project: oc new-project bank-infra","title":"2. Create a new project"},{"location":"tekton/lab6/#3-create-a-service-account","text":"To make sure the pipeline has the appropriate permissions to store images in the local OpenShift registry, you need to create a service account. For this tutorial, call it \"pipeline\". oc create serviceaccount pipeline oc adm policy add-scc-to-user privileged -z pipeline oc adm policy add-role-to-user edit -z pipeline oc policy add-role-to-user edit system:serviceaccount:bank-infra:pipeline -n example-bank That last command grants your service account access to the example-bank project. You should have created it as part of the prerequisites.","title":"3. Create a service account"},{"location":"tekton/lab6/#4-install-tasks","text":"Tekton Pipelines are essentially a chain of of individual tasks. This tutorial uses serveral tasks, but you can install them all at once by cloning the main code pattern repo and then targeting the pipelines/tasks folder: cd ../pipeline oc apply -f tasks","title":"4. Install tasks"},{"location":"tekton/lab6/#5-create-the-pipeline","text":"The pipeline file ( example-bank-pipeline.yaml ) links together all the tasks of your pipeline, in this case consisting of: code scanning, building code into an image, and then deploying and exposing those images. kubectl apply -f example-bank-pipeline.yaml","title":"5. Create the pipeline"},{"location":"tekton/lab6/#steps-for-threat-testing","text":"Did I say code scanning? Let\u2019s take this exercise in creating a pipeline a step further and introduce threat testing by including an application called SonarQube. SonarQube is open source software for inspecting a code base. It supports a plethora of languages. SonarQube can report on bugs and security vulnerabilities, as well as other helpful areas like code coverage and unit tests. This tutorial uses SonarQube to test code for vulnerabilities.","title":"Steps for threat testing"},{"location":"tekton/lab6/#1-deploy-an-instance-of-sonarqube","text":"Another file in the repo describes all the settings needed for a deployment of SonarQube. A Deployment lists all the volumes and mount paths SonarQube requires. Additionally, a Service and Route allow the app to be publicly accessible. One file contains all this information: oc apply -f sonarqube.yaml","title":"1. Deploy an instance of SonarQube"},{"location":"tekton/lab6/#2-create-a-pvc","text":"You also need a Persistant Volume Claim. It allows the tasks in the pipeline to have a common place to write information to share with one another: oc apply -f bank-pvc.yaml","title":"2. Create a PVC"},{"location":"tekton/lab6/#3-run-the-pipeline","text":"Finally, with your vulnerability scanner in place, you can run your financial pipeline using a PipelineRun file: oc create -f bank-pipelinerun.yaml Anytime you need to rescan and/or redeploy your code base, simply run that command.","title":"3. Run the pipeline"},{"location":"tekton/lab6/#results","text":"Now to enjoy the fruits of our labor! SonarQube has its own web interface. To get to it, navigate to the bank-infra project in the OpenShift web console. From the menu on the left, select Networking and then Routes : Select the URL for SonarQube and check out the stats for your installation: All green! Since there are no vulnerabilites here, you can click through to check out the stats for the lines of code: Back on the Routes page, you can also find the URL for the user interface of your freshly installed Example Bank app. For the loyalty-mobile-simulator-service :","title":"Results"},{"location":"tekton/tasks/","text":"Task \u00b6 Defines a set of build steps such as compiling code, running tests, and building and deploying images. Pipeline \u00b6 Defines the set of tasks that compose a pipeline. PipelineRun \u00b6 Instantiates a Pipeline for execution with specific inputs, outputs, and execution parameters.","title":"Explain tasks and pipelines"},{"location":"tekton/tasks/#task","text":"Defines a set of build steps such as compiling code, running tests, and building and deploying images.","title":"Task"},{"location":"tekton/tasks/#pipeline","text":"Defines the set of tasks that compose a pipeline.","title":"Pipeline"},{"location":"tekton/tasks/#pipelinerun","text":"Instantiates a Pipeline for execution with specific inputs, outputs, and execution parameters.","title":"PipelineRun"},{"location":"tekton/tooling/","text":"Tekton provides open-source components to help you standardize your CI/CD tooling and processes across vendors, languages, and deployment environments. Industry specifications around pipelines, releases, workflows, and other CI/CD components available with Tekton will work well with existing CI/CD tools such as Jenkins, Jenkins X, Skaffold, and Knative, among others.","title":"CI/CD"},{"location":"tekton/lab6/","text":"Introduction \u00b6 A series of labs detailing the installion of Tekton in an OpenShift cluster and deploying a pipeline to build and deploy the Example-Bank application. About this workshop \u00b6 This series has an additional presentation. Agenda \u00b6 Cluster Setup Install Pipeline Credits \u00b6 Olaph Wagoner Badge \u00b6 After completion of the workshop, you can collect your badge","title":"About Lab 6"},{"location":"tekton/lab6/#introduction","text":"A series of labs detailing the installion of Tekton in an OpenShift cluster and deploying a pipeline to build and deploy the Example-Bank application.","title":"Introduction"},{"location":"tekton/lab6/#about-this-workshop","text":"This series has an additional presentation.","title":"About this workshop"},{"location":"tekton/lab6/#agenda","text":"Cluster Setup Install Pipeline","title":"Agenda"},{"location":"tekton/lab6/#credits","text":"Olaph Wagoner","title":"Credits"},{"location":"tekton/lab6/#badge","text":"After completion of the workshop, you can collect your badge","title":"Badge"},{"location":"tekton/lab6/setup/","text":"Let us get your OpenShift cluster in the correct state. 1. Target your cluster \u00b6 Log in to your IBM Cloud account and navigate to the overview page for your OpenShift cluster. Click on the OpenShift web console button in the upper right corner. On web console, click the menu in the upper right corner (the label contains your email address), and select Copy Login Command . Paste the command into your local console window. It should resemble the following example: oc login https://c100-e.us-east.containers.cloud.ibm.com:XXXXX --token=XXXXXXXXXXXXXXXXXXXXXXXXXX 2. Login to IBM Cloud \u00b6 ibmcloud login -u <account name> remember to use account \"1\": this is where we will create an AppID instance (if you do not already have one...) 3. Clone the repo \u00b6 git clone https://github.com/IBM/example-bank.git 4. re-create the example-bank project \u00b6 If you have been with us for any part of the lab track, I am sorry to say you will need to delete your hard earned work! oc delete project example-bank Otherwise, everyone please execute: oc new-project example-bank 5. Install the PostgreSQL Operator and start an instance of a database \u00b6 cd example-bank/scripts ./deploy-db.sh 6. Create an AppID instance \u00b6 ./createappid.sh pay attention to the result of this script: you will need the Management URL and API Key for the next command. If you already have an instance of AppID, you can retrieve the values you need using ibmcloud resource service-key appid-example-bank-credentials 7. Create Secrets \u00b6 ./createsecrets.sh <ManagementURL> <APIKey> 8. Apply schema \u00b6 Once your database is running: cd .. oc apply -f data_model/job.yaml","title":"Cluster Setup"},{"location":"tekton/lab6/setup/#1-target-your-cluster","text":"Log in to your IBM Cloud account and navigate to the overview page for your OpenShift cluster. Click on the OpenShift web console button in the upper right corner. On web console, click the menu in the upper right corner (the label contains your email address), and select Copy Login Command . Paste the command into your local console window. It should resemble the following example: oc login https://c100-e.us-east.containers.cloud.ibm.com:XXXXX --token=XXXXXXXXXXXXXXXXXXXXXXXXXX","title":"1. Target your cluster"},{"location":"tekton/lab6/setup/#2-login-to-ibm-cloud","text":"ibmcloud login -u <account name> remember to use account \"1\": this is where we will create an AppID instance (if you do not already have one...)","title":"2. Login to IBM Cloud"},{"location":"tekton/lab6/setup/#3-clone-the-repo","text":"git clone https://github.com/IBM/example-bank.git","title":"3. Clone the repo"},{"location":"tekton/lab6/setup/#4-re-create-the-example-bank-project","text":"If you have been with us for any part of the lab track, I am sorry to say you will need to delete your hard earned work! oc delete project example-bank Otherwise, everyone please execute: oc new-project example-bank","title":"4. re-create the example-bank project"},{"location":"tekton/lab6/setup/#5-install-the-postgresql-operator-and-start-an-instance-of-a-database","text":"cd example-bank/scripts ./deploy-db.sh","title":"5. Install the PostgreSQL Operator and start an instance of a database"},{"location":"tekton/lab6/setup/#6-create-an-appid-instance","text":"./createappid.sh pay attention to the result of this script: you will need the Management URL and API Key for the next command. If you already have an instance of AppID, you can retrieve the values you need using ibmcloud resource service-key appid-example-bank-credentials","title":"6. Create an AppID instance"},{"location":"tekton/lab6/setup/#7-create-secrets","text":"./createsecrets.sh <ManagementURL> <APIKey>","title":"7. Create Secrets"},{"location":"tekton/lab6/setup/#8-apply-schema","text":"Once your database is running: cd .. oc apply -f data_model/job.yaml","title":"8. Apply schema"}]}